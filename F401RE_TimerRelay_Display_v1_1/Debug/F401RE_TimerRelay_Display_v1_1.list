
F401RE_TimerRelay_Display_v1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b0  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f74  08005f74  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f7c  08005f7c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f7c  08005f7c  00015f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000078  08005ffc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200005a4  08005ffc  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8a0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a6d  00000000  00000000  0002a948  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  0002c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  0002ce10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a60  00000000  00000000  0002d798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e84  00000000  00000000  000431f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b82d  00000000  00000000  0004c07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d78a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e6c  00000000  00000000  000d7924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004bac 	.word	0x08004bac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004bac 	.word	0x08004bac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2uiz>:
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	d211      	bcs.n	8000620 <__aeabi_d2uiz+0x28>
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d211      	bcs.n	8000626 <__aeabi_d2uiz+0x2e>
 8000602:	d50d      	bpl.n	8000620 <__aeabi_d2uiz+0x28>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d40e      	bmi.n	800062c <__aeabi_d2uiz+0x34>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	fa23 f002 	lsr.w	r0, r3, r2
 800061e:	4770      	bx	lr
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	4770      	bx	lr
 8000626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800062a:	d102      	bne.n	8000632 <__aeabi_d2uiz+0x3a>
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b972 	b.w	8000934 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	4688      	mov	r8, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14b      	bne.n	800070e <__udivmoddi4+0xa6>
 8000676:	428a      	cmp	r2, r1
 8000678:	4615      	mov	r5, r2
 800067a:	d967      	bls.n	800074c <__udivmoddi4+0xe4>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0720 	rsb	r7, r2, #32
 8000686:	fa01 f302 	lsl.w	r3, r1, r2
 800068a:	fa20 f707 	lsr.w	r7, r0, r7
 800068e:	4095      	lsls	r5, r2
 8000690:	ea47 0803 	orr.w	r8, r7, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbb8 f7fe 	udiv	r7, r8, lr
 80006a0:	fa1f fc85 	uxth.w	ip, r5
 80006a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ac:	fb07 f10c 	mul.w	r1, r7, ip
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18eb      	adds	r3, r5, r3
 80006b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006ba:	f080 811b 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8118 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006c4:	3f02      	subs	r7, #2
 80006c6:	442b      	add	r3, r5
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006dc:	45a4      	cmp	ip, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	192c      	adds	r4, r5, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8107 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	f240 8104 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006f0:	3802      	subs	r0, #2
 80006f2:	442c      	add	r4, r5
 80006f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006f8:	eba4 040c 	sub.w	r4, r4, ip
 80006fc:	2700      	movs	r7, #0
 80006fe:	b11e      	cbz	r6, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c6 4300 	strd	r4, r3, [r6]
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d909      	bls.n	8000726 <__udivmoddi4+0xbe>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80eb 	beq.w	80008ee <__udivmoddi4+0x286>
 8000718:	2700      	movs	r7, #0
 800071a:	e9c6 0100 	strd	r0, r1, [r6]
 800071e:	4638      	mov	r0, r7
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	fab3 f783 	clz	r7, r3
 800072a:	2f00      	cmp	r7, #0
 800072c:	d147      	bne.n	80007be <__udivmoddi4+0x156>
 800072e:	428b      	cmp	r3, r1
 8000730:	d302      	bcc.n	8000738 <__udivmoddi4+0xd0>
 8000732:	4282      	cmp	r2, r0
 8000734:	f200 80fa 	bhi.w	800092c <__udivmoddi4+0x2c4>
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0303 	sbc.w	r3, r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	4698      	mov	r8, r3
 8000742:	2e00      	cmp	r6, #0
 8000744:	d0e0      	beq.n	8000708 <__udivmoddi4+0xa0>
 8000746:	e9c6 4800 	strd	r4, r8, [r6]
 800074a:	e7dd      	b.n	8000708 <__udivmoddi4+0xa0>
 800074c:	b902      	cbnz	r2, 8000750 <__udivmoddi4+0xe8>
 800074e:	deff      	udf	#255	; 0xff
 8000750:	fab2 f282 	clz	r2, r2
 8000754:	2a00      	cmp	r2, #0
 8000756:	f040 808f 	bne.w	8000878 <__udivmoddi4+0x210>
 800075a:	1b49      	subs	r1, r1, r5
 800075c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000760:	fa1f f885 	uxth.w	r8, r5
 8000764:	2701      	movs	r7, #1
 8000766:	fbb1 fcfe 	udiv	ip, r1, lr
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000770:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000774:	fb08 f10c 	mul.w	r1, r8, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x124>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4299      	cmp	r1, r3
 8000786:	f200 80cd 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 800078a:	4684      	mov	ip, r0
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	b2a3      	uxth	r3, r4
 8000790:	fbb1 f0fe 	udiv	r0, r1, lr
 8000794:	fb0e 1410 	mls	r4, lr, r0, r1
 8000798:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800079c:	fb08 f800 	mul.w	r8, r8, r0
 80007a0:	45a0      	cmp	r8, r4
 80007a2:	d907      	bls.n	80007b4 <__udivmoddi4+0x14c>
 80007a4:	192c      	adds	r4, r5, r4
 80007a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x14a>
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	f200 80b6 	bhi.w	800091e <__udivmoddi4+0x2b6>
 80007b2:	4618      	mov	r0, r3
 80007b4:	eba4 0408 	sub.w	r4, r4, r8
 80007b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007bc:	e79f      	b.n	80006fe <__udivmoddi4+0x96>
 80007be:	f1c7 0c20 	rsb	ip, r7, #32
 80007c2:	40bb      	lsls	r3, r7
 80007c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007cc:	fa01 f407 	lsl.w	r4, r1, r7
 80007d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007dc:	4325      	orrs	r5, r4
 80007de:	fbb3 f9f8 	udiv	r9, r3, r8
 80007e2:	0c2c      	lsrs	r4, r5, #16
 80007e4:	fb08 3319 	mls	r3, r8, r9, r3
 80007e8:	fa1f fa8e 	uxth.w	sl, lr
 80007ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007f0:	fb09 f40a 	mul.w	r4, r9, sl
 80007f4:	429c      	cmp	r4, r3
 80007f6:	fa02 f207 	lsl.w	r2, r2, r7
 80007fa:	fa00 f107 	lsl.w	r1, r0, r7
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1e 0303 	adds.w	r3, lr, r3
 8000804:	f109 30ff 	add.w	r0, r9, #4294967295
 8000808:	f080 8087 	bcs.w	800091a <__udivmoddi4+0x2b2>
 800080c:	429c      	cmp	r4, r3
 800080e:	f240 8084 	bls.w	800091a <__udivmoddi4+0x2b2>
 8000812:	f1a9 0902 	sub.w	r9, r9, #2
 8000816:	4473      	add	r3, lr
 8000818:	1b1b      	subs	r3, r3, r4
 800081a:	b2ad      	uxth	r5, r5
 800081c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000820:	fb08 3310 	mls	r3, r8, r0, r3
 8000824:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000828:	fb00 fa0a 	mul.w	sl, r0, sl
 800082c:	45a2      	cmp	sl, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1e 0404 	adds.w	r4, lr, r4
 8000834:	f100 33ff 	add.w	r3, r0, #4294967295
 8000838:	d26b      	bcs.n	8000912 <__udivmoddi4+0x2aa>
 800083a:	45a2      	cmp	sl, r4
 800083c:	d969      	bls.n	8000912 <__udivmoddi4+0x2aa>
 800083e:	3802      	subs	r0, #2
 8000840:	4474      	add	r4, lr
 8000842:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000846:	fba0 8902 	umull	r8, r9, r0, r2
 800084a:	eba4 040a 	sub.w	r4, r4, sl
 800084e:	454c      	cmp	r4, r9
 8000850:	46c2      	mov	sl, r8
 8000852:	464b      	mov	r3, r9
 8000854:	d354      	bcc.n	8000900 <__udivmoddi4+0x298>
 8000856:	d051      	beq.n	80008fc <__udivmoddi4+0x294>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d069      	beq.n	8000930 <__udivmoddi4+0x2c8>
 800085c:	ebb1 050a 	subs.w	r5, r1, sl
 8000860:	eb64 0403 	sbc.w	r4, r4, r3
 8000864:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000868:	40fd      	lsrs	r5, r7
 800086a:	40fc      	lsrs	r4, r7
 800086c:	ea4c 0505 	orr.w	r5, ip, r5
 8000870:	e9c6 5400 	strd	r5, r4, [r6]
 8000874:	2700      	movs	r7, #0
 8000876:	e747      	b.n	8000708 <__udivmoddi4+0xa0>
 8000878:	f1c2 0320 	rsb	r3, r2, #32
 800087c:	fa20 f703 	lsr.w	r7, r0, r3
 8000880:	4095      	lsls	r5, r2
 8000882:	fa01 f002 	lsl.w	r0, r1, r2
 8000886:	fa21 f303 	lsr.w	r3, r1, r3
 800088a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800088e:	4338      	orrs	r0, r7
 8000890:	0c01      	lsrs	r1, r0, #16
 8000892:	fbb3 f7fe 	udiv	r7, r3, lr
 8000896:	fa1f f885 	uxth.w	r8, r5
 800089a:	fb0e 3317 	mls	r3, lr, r7, r3
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb07 f308 	mul.w	r3, r7, r8
 80008a6:	428b      	cmp	r3, r1
 80008a8:	fa04 f402 	lsl.w	r4, r4, r2
 80008ac:	d907      	bls.n	80008be <__udivmoddi4+0x256>
 80008ae:	1869      	adds	r1, r5, r1
 80008b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008b4:	d22f      	bcs.n	8000916 <__udivmoddi4+0x2ae>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d92d      	bls.n	8000916 <__udivmoddi4+0x2ae>
 80008ba:	3f02      	subs	r7, #2
 80008bc:	4429      	add	r1, r5
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	b281      	uxth	r1, r0
 80008c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ce:	fb00 f308 	mul.w	r3, r0, r8
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x27e>
 80008d6:	1869      	adds	r1, r5, r1
 80008d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008dc:	d217      	bcs.n	800090e <__udivmoddi4+0x2a6>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d915      	bls.n	800090e <__udivmoddi4+0x2a6>
 80008e2:	3802      	subs	r0, #2
 80008e4:	4429      	add	r1, r5
 80008e6:	1ac9      	subs	r1, r1, r3
 80008e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ec:	e73b      	b.n	8000766 <__udivmoddi4+0xfe>
 80008ee:	4637      	mov	r7, r6
 80008f0:	4630      	mov	r0, r6
 80008f2:	e709      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f4:	4607      	mov	r7, r0
 80008f6:	e6e7      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f8:	4618      	mov	r0, r3
 80008fa:	e6fb      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008fc:	4541      	cmp	r1, r8
 80008fe:	d2ab      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000900:	ebb8 0a02 	subs.w	sl, r8, r2
 8000904:	eb69 020e 	sbc.w	r2, r9, lr
 8000908:	3801      	subs	r0, #1
 800090a:	4613      	mov	r3, r2
 800090c:	e7a4      	b.n	8000858 <__udivmoddi4+0x1f0>
 800090e:	4660      	mov	r0, ip
 8000910:	e7e9      	b.n	80008e6 <__udivmoddi4+0x27e>
 8000912:	4618      	mov	r0, r3
 8000914:	e795      	b.n	8000842 <__udivmoddi4+0x1da>
 8000916:	4667      	mov	r7, ip
 8000918:	e7d1      	b.n	80008be <__udivmoddi4+0x256>
 800091a:	4681      	mov	r9, r0
 800091c:	e77c      	b.n	8000818 <__udivmoddi4+0x1b0>
 800091e:	3802      	subs	r0, #2
 8000920:	442c      	add	r4, r5
 8000922:	e747      	b.n	80007b4 <__udivmoddi4+0x14c>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	442b      	add	r3, r5
 800092a:	e72f      	b.n	800078c <__udivmoddi4+0x124>
 800092c:	4638      	mov	r0, r7
 800092e:	e708      	b.n	8000742 <__udivmoddi4+0xda>
 8000930:	4637      	mov	r7, r6
 8000932:	e6e9      	b.n	8000708 <__udivmoddi4+0xa0>

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800093e:	f001 f8fb 	bl	8001b38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000942:	f000 f83d 	bl	80009c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000946:	f000 f951 	bl	8000bec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800094a:	f000 f925 	bl	8000b98 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800094e:	f000 f8a3 	bl	8000a98 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000952:	f000 f8f3 	bl	8000b3c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	init();
 8000956:	f000 fd29 	bl	80013ac <init>
	HAL_Delay(200);
 800095a:	20c8      	movs	r0, #200	; 0xc8
 800095c:	f001 f95e 	bl	8001c1c <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		getPotentiometerValue();
 8000960:	f000 f9f6 	bl	8000d50 <getPotentiometerValue>
		getThreshold();
 8000964:	f000 fa1c 	bl	8000da0 <getThreshold>
		char asd[4];
		snprintf(asd, sizeof(asd), "%d", threshold);
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <main+0x78>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	1d38      	adds	r0, r7, #4
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <main+0x7c>)
 8000970:	2104      	movs	r1, #4
 8000972:	f003 fd19 	bl	80043a8 <sniprintf>
//		ssd1306_Fill(Black);
//		ssd1306_SetCursor(2, 28);
//		ssd1306_WriteString(asd, Font_16x26, White);
//		ssd1306_UpdateScreen();

		ssd1306_Fill(Black);
 8000976:	2000      	movs	r0, #0
 8000978:	f000 fde2 	bl	8001540 <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 800097c:	2100      	movs	r1, #0
 800097e:	2002      	movs	r0, #2
 8000980:	f000 ff2c 	bl	80017dc <ssd1306_SetCursor>
		ssd1306_WriteString("Value:", Font_16x26, White);
 8000984:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <main+0x80>)
 8000986:	2301      	movs	r3, #1
 8000988:	ca06      	ldmia	r2, {r1, r2}
 800098a:	480c      	ldr	r0, [pc, #48]	; (80009bc <main+0x84>)
 800098c:	f000 ff00 	bl	8001790 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 28);
 8000990:	211c      	movs	r1, #28
 8000992:	2002      	movs	r0, #2
 8000994:	f000 ff22 	bl	80017dc <ssd1306_SetCursor>
		ssd1306_WriteString(asd, Font_16x26, White);
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <main+0x80>)
 800099a:	1d38      	adds	r0, r7, #4
 800099c:	2301      	movs	r3, #1
 800099e:	ca06      	ldmia	r2, {r1, r2}
 80009a0:	f000 fef6 	bl	8001790 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80009a4:	f000 fdee 	bl	8001584 <ssd1306_UpdateScreen>

		checkBtnPressed();
 80009a8:	f000 f9a4 	bl	8000cf4 <checkBtnPressed>
	while (1) {
 80009ac:	e7d8      	b.n	8000960 <main+0x28>
 80009ae:	bf00      	nop
 80009b0:	200004ac 	.word	0x200004ac
 80009b4:	08004bc4 	.word	0x08004bc4
 80009b8:	20000000 	.word	0x20000000
 80009bc:	08004bc8 	.word	0x08004bc8

080009c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fce1 	bl	8004396 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <SystemClock_Config+0xd0>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <SystemClock_Config+0xd0>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <SystemClock_Config+0xd0>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0c:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000a38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a3c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a42:	2307      	movs	r3, #7
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fc34 	bl	80032b8 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9a>
		Error_Handler();
 8000a56:	f000 fcc5 	bl	80013e4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fe8e 	bl	8003798 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xc6>
		Error_Handler();
 8000a82:	f000 fcaf 	bl	80013e4 <Error_Handler>
	}
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <MX_ADC1_Init+0x9c>)
 8000aae:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ab6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <MX_ADC1_Init+0xa0>)
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000afa:	f001 f8b1 	bl	8001c60 <HAL_ADC_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000b04:	f000 fc6e 	bl	80013e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000b1a:	f001 f999 	bl	8001e50 <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000b24:	f000 fc5e 	bl	80013e4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000504 	.word	0x20000504
 8000b34:	40012000 	.word	0x40012000
 8000b38:	0f000001 	.word	0x0f000001

08000b3c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_I2C1_Init+0x54>)
 8000b44:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x58>)
 8000b4a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b7a:	f001 fe21 	bl	80027c0 <HAL_I2C_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000b84:	f000 fc2e 	bl	80013e4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200004b0 	.word	0x200004b0
 8000b90:	40005400 	.word	0x40005400
 8000b94:	000186a0 	.word	0x000186a0

08000b98 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <MX_USART2_UART_Init+0x50>)
 8000ba0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	f002 ffd4 	bl	8003b7c <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000bda:	f000 fc03 	bl	80013e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000554 	.word	0x20000554
 8000be8:	40004400 	.word	0x40004400

08000bec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a35      	ldr	r2, [pc, #212]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a27      	ldr	r2, [pc, #156]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <MX_GPIO_Init+0xf4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2120      	movs	r1, #32
 8000c76:	481b      	ldr	r0, [pc, #108]	; (8000ce4 <MX_GPIO_Init+0xf8>)
 8000c78:	f001 fd88 	bl	800278c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Relay_OUT_GPIO_Port, Relay_OUT_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4819      	ldr	r0, [pc, #100]	; (8000ce8 <MX_GPIO_Init+0xfc>)
 8000c82:	f001 fd83 	bl	800278c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_GPIO_Init+0x100>)
 8000c8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <MX_GPIO_Init+0x104>)
 8000c9c:	f001 fbdc 	bl	8002458 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <MX_GPIO_Init+0xf8>)
 8000cb8:	f001 fbce 	bl	8002458 <HAL_GPIO_Init>

	/*Configure GPIO pin : Relay_OUT_Pin */
	GPIO_InitStruct.Pin = Relay_OUT_Pin;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Relay_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_GPIO_Init+0xfc>)
 8000cd4:	f001 fbc0 	bl	8002458 <HAL_GPIO_Init>

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	10210000 	.word	0x10210000
 8000cf0:	40020800 	.word	0x40020800

08000cf4 <checkBtnPressed>:

/* USER CODE BEGIN 4 */
void checkBtnPressed(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 8000cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfc:	4810      	ldr	r0, [pc, #64]	; (8000d40 <checkBtnPressed+0x4c>)
 8000cfe:	f001 fd2d 	bl	800275c <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d115      	bne.n	8000d34 <checkBtnPressed+0x40>
		if (btnPressed == 0) {
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <checkBtnPressed+0x50>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d111      	bne.n	8000d34 <checkBtnPressed+0x40>
			btnPressed = 1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <checkBtnPressed+0x50>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
			//printf("Premuto!\n");
			HAL_GPIO_WritePin(Relay_OUT_GPIO_Port, Relay_OUT_Pin,
 8000d16:	2200      	movs	r2, #0
 8000d18:	2120      	movs	r1, #32
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <checkBtnPressed+0x54>)
 8000d1c:	f001 fd36 	bl	800278c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_Delay(threshold);
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <checkBtnPressed+0x58>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 ff79 	bl	8001c1c <HAL_Delay>
			HAL_GPIO_WritePin(Relay_OUT_GPIO_Port, Relay_OUT_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <checkBtnPressed+0x54>)
 8000d30:	f001 fd2c 	bl	800278c <HAL_GPIO_WritePin>
		}
	}
	btnPressed = 0;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <checkBtnPressed+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40020800 	.word	0x40020800
 8000d44:	20000094 	.word	0x20000094
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	200004ac 	.word	0x200004ac

08000d50 <getPotentiometerValue>:

void getPotentiometerValue(void) {
 8000d50:	b598      	push	{r3, r4, r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000d54:	480e      	ldr	r0, [pc, #56]	; (8000d90 <getPotentiometerValue+0x40>)
 8000d56:	f000 ffc7 	bl	8001ce8 <HAL_ADC_Start>
	adcValue = HAL_ADC_GetValue(&hadc1);
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <getPotentiometerValue+0x40>)
 8000d5c:	f001 f86a 	bl	8001e34 <HAL_ADC_GetValue>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <getPotentiometerValue+0x44>)
 8000d64:	601a      	str	r2, [r3, #0]

	myTimerValue = round(adcValue / 10);
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <getPotentiometerValue+0x44>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <getPotentiometerValue+0x48>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	08db      	lsrs	r3, r3, #3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fbc6 	bl	8000504 <__aeabi_ui2d>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	4621      	mov	r1, r4
 8000d80:	f7ff fc3a 	bl	80005f8 <__aeabi_d2uiz>
 8000d84:	4602      	mov	r2, r0
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <getPotentiometerValue+0x4c>)
 8000d88:	601a      	str	r2, [r3, #0]
	//printf("Timer Value: %d\n", myTimerValue);
}
 8000d8a:	bf00      	nop
 8000d8c:	bd98      	pop	{r3, r4, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000504 	.word	0x20000504
 8000d94:	20000594 	.word	0x20000594
 8000d98:	cccccccd 	.word	0xcccccccd
 8000d9c:	20000598 	.word	0x20000598

08000da0 <getThreshold>:

void getThreshold(void) {
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

	if (myTimerValue <= 5) {
 8000da4:	4b8f      	ldr	r3, [pc, #572]	; (8000fe4 <getThreshold+0x244>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d803      	bhi.n	8000db4 <getThreshold+0x14>
		threshold = 5;
 8000dac:	4b8e      	ldr	r3, [pc, #568]	; (8000fe8 <getThreshold+0x248>)
 8000dae:	2205      	movs	r2, #5
 8000db0:	601a      	str	r2, [r3, #0]
	} else if (myTimerValue <= 415) {
		threshold = 415;
	}

	//printf("threshold: %d\n", threshold);
}
 8000db2:	e2d6      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 10) {
 8000db4:	4b8b      	ldr	r3, [pc, #556]	; (8000fe4 <getThreshold+0x244>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b0a      	cmp	r3, #10
 8000dba:	d803      	bhi.n	8000dc4 <getThreshold+0x24>
		threshold = 10;
 8000dbc:	4b8a      	ldr	r3, [pc, #552]	; (8000fe8 <getThreshold+0x248>)
 8000dbe:	220a      	movs	r2, #10
 8000dc0:	601a      	str	r2, [r3, #0]
}
 8000dc2:	e2ce      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 15) {
 8000dc4:	4b87      	ldr	r3, [pc, #540]	; (8000fe4 <getThreshold+0x244>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d803      	bhi.n	8000dd4 <getThreshold+0x34>
		threshold = 15;
 8000dcc:	4b86      	ldr	r3, [pc, #536]	; (8000fe8 <getThreshold+0x248>)
 8000dce:	220f      	movs	r2, #15
 8000dd0:	601a      	str	r2, [r3, #0]
}
 8000dd2:	e2c6      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 20) {
 8000dd4:	4b83      	ldr	r3, [pc, #524]	; (8000fe4 <getThreshold+0x244>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b14      	cmp	r3, #20
 8000dda:	d803      	bhi.n	8000de4 <getThreshold+0x44>
		threshold = 20;
 8000ddc:	4b82      	ldr	r3, [pc, #520]	; (8000fe8 <getThreshold+0x248>)
 8000dde:	2214      	movs	r2, #20
 8000de0:	601a      	str	r2, [r3, #0]
}
 8000de2:	e2be      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 25) {
 8000de4:	4b7f      	ldr	r3, [pc, #508]	; (8000fe4 <getThreshold+0x244>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b19      	cmp	r3, #25
 8000dea:	d803      	bhi.n	8000df4 <getThreshold+0x54>
		threshold = 25;
 8000dec:	4b7e      	ldr	r3, [pc, #504]	; (8000fe8 <getThreshold+0x248>)
 8000dee:	2219      	movs	r2, #25
 8000df0:	601a      	str	r2, [r3, #0]
}
 8000df2:	e2b6      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 30) {
 8000df4:	4b7b      	ldr	r3, [pc, #492]	; (8000fe4 <getThreshold+0x244>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b1e      	cmp	r3, #30
 8000dfa:	d803      	bhi.n	8000e04 <getThreshold+0x64>
		threshold = 30;
 8000dfc:	4b7a      	ldr	r3, [pc, #488]	; (8000fe8 <getThreshold+0x248>)
 8000dfe:	221e      	movs	r2, #30
 8000e00:	601a      	str	r2, [r3, #0]
}
 8000e02:	e2ae      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 35) {
 8000e04:	4b77      	ldr	r3, [pc, #476]	; (8000fe4 <getThreshold+0x244>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b23      	cmp	r3, #35	; 0x23
 8000e0a:	d803      	bhi.n	8000e14 <getThreshold+0x74>
		threshold = 35;
 8000e0c:	4b76      	ldr	r3, [pc, #472]	; (8000fe8 <getThreshold+0x248>)
 8000e0e:	2223      	movs	r2, #35	; 0x23
 8000e10:	601a      	str	r2, [r3, #0]
}
 8000e12:	e2a6      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 40) {
 8000e14:	4b73      	ldr	r3, [pc, #460]	; (8000fe4 <getThreshold+0x244>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b28      	cmp	r3, #40	; 0x28
 8000e1a:	d803      	bhi.n	8000e24 <getThreshold+0x84>
		threshold = 40;
 8000e1c:	4b72      	ldr	r3, [pc, #456]	; (8000fe8 <getThreshold+0x248>)
 8000e1e:	2228      	movs	r2, #40	; 0x28
 8000e20:	601a      	str	r2, [r3, #0]
}
 8000e22:	e29e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 45) {
 8000e24:	4b6f      	ldr	r3, [pc, #444]	; (8000fe4 <getThreshold+0x244>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b2d      	cmp	r3, #45	; 0x2d
 8000e2a:	d803      	bhi.n	8000e34 <getThreshold+0x94>
		threshold = 45;
 8000e2c:	4b6e      	ldr	r3, [pc, #440]	; (8000fe8 <getThreshold+0x248>)
 8000e2e:	222d      	movs	r2, #45	; 0x2d
 8000e30:	601a      	str	r2, [r3, #0]
}
 8000e32:	e296      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 50) {
 8000e34:	4b6b      	ldr	r3, [pc, #428]	; (8000fe4 <getThreshold+0x244>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b32      	cmp	r3, #50	; 0x32
 8000e3a:	d803      	bhi.n	8000e44 <getThreshold+0xa4>
		threshold = 50;
 8000e3c:	4b6a      	ldr	r3, [pc, #424]	; (8000fe8 <getThreshold+0x248>)
 8000e3e:	2232      	movs	r2, #50	; 0x32
 8000e40:	601a      	str	r2, [r3, #0]
}
 8000e42:	e28e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 55) {
 8000e44:	4b67      	ldr	r3, [pc, #412]	; (8000fe4 <getThreshold+0x244>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b37      	cmp	r3, #55	; 0x37
 8000e4a:	d803      	bhi.n	8000e54 <getThreshold+0xb4>
		threshold = 55;
 8000e4c:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <getThreshold+0x248>)
 8000e4e:	2237      	movs	r2, #55	; 0x37
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	e286      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 60) {
 8000e54:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <getThreshold+0x244>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b3c      	cmp	r3, #60	; 0x3c
 8000e5a:	d803      	bhi.n	8000e64 <getThreshold+0xc4>
		threshold = 60;
 8000e5c:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <getThreshold+0x248>)
 8000e5e:	223c      	movs	r2, #60	; 0x3c
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	e27e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 65) {
 8000e64:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <getThreshold+0x244>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b41      	cmp	r3, #65	; 0x41
 8000e6a:	d803      	bhi.n	8000e74 <getThreshold+0xd4>
		threshold = 65;
 8000e6c:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <getThreshold+0x248>)
 8000e6e:	2241      	movs	r2, #65	; 0x41
 8000e70:	601a      	str	r2, [r3, #0]
}
 8000e72:	e276      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 70) {
 8000e74:	4b5b      	ldr	r3, [pc, #364]	; (8000fe4 <getThreshold+0x244>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b46      	cmp	r3, #70	; 0x46
 8000e7a:	d803      	bhi.n	8000e84 <getThreshold+0xe4>
		threshold = 70;
 8000e7c:	4b5a      	ldr	r3, [pc, #360]	; (8000fe8 <getThreshold+0x248>)
 8000e7e:	2246      	movs	r2, #70	; 0x46
 8000e80:	601a      	str	r2, [r3, #0]
}
 8000e82:	e26e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 75) {
 8000e84:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <getThreshold+0x244>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b4b      	cmp	r3, #75	; 0x4b
 8000e8a:	d803      	bhi.n	8000e94 <getThreshold+0xf4>
		threshold = 75;
 8000e8c:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <getThreshold+0x248>)
 8000e8e:	224b      	movs	r2, #75	; 0x4b
 8000e90:	601a      	str	r2, [r3, #0]
}
 8000e92:	e266      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 80) {
 8000e94:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <getThreshold+0x244>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b50      	cmp	r3, #80	; 0x50
 8000e9a:	d803      	bhi.n	8000ea4 <getThreshold+0x104>
		threshold = 80;
 8000e9c:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <getThreshold+0x248>)
 8000e9e:	2250      	movs	r2, #80	; 0x50
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	e25e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 85) {
 8000ea4:	4b4f      	ldr	r3, [pc, #316]	; (8000fe4 <getThreshold+0x244>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b55      	cmp	r3, #85	; 0x55
 8000eaa:	d803      	bhi.n	8000eb4 <getThreshold+0x114>
		threshold = 85;
 8000eac:	4b4e      	ldr	r3, [pc, #312]	; (8000fe8 <getThreshold+0x248>)
 8000eae:	2255      	movs	r2, #85	; 0x55
 8000eb0:	601a      	str	r2, [r3, #0]
}
 8000eb2:	e256      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 90) {
 8000eb4:	4b4b      	ldr	r3, [pc, #300]	; (8000fe4 <getThreshold+0x244>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b5a      	cmp	r3, #90	; 0x5a
 8000eba:	d803      	bhi.n	8000ec4 <getThreshold+0x124>
		threshold = 90;
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <getThreshold+0x248>)
 8000ebe:	225a      	movs	r2, #90	; 0x5a
 8000ec0:	601a      	str	r2, [r3, #0]
}
 8000ec2:	e24e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 95) {
 8000ec4:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <getThreshold+0x244>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b5f      	cmp	r3, #95	; 0x5f
 8000eca:	d803      	bhi.n	8000ed4 <getThreshold+0x134>
		threshold = 95;
 8000ecc:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <getThreshold+0x248>)
 8000ece:	225f      	movs	r2, #95	; 0x5f
 8000ed0:	601a      	str	r2, [r3, #0]
}
 8000ed2:	e246      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 100) {
 8000ed4:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <getThreshold+0x244>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b64      	cmp	r3, #100	; 0x64
 8000eda:	d803      	bhi.n	8000ee4 <getThreshold+0x144>
		threshold = 100;
 8000edc:	4b42      	ldr	r3, [pc, #264]	; (8000fe8 <getThreshold+0x248>)
 8000ede:	2264      	movs	r2, #100	; 0x64
 8000ee0:	601a      	str	r2, [r3, #0]
}
 8000ee2:	e23e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 105) {
 8000ee4:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <getThreshold+0x244>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b69      	cmp	r3, #105	; 0x69
 8000eea:	d803      	bhi.n	8000ef4 <getThreshold+0x154>
		threshold = 105;
 8000eec:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <getThreshold+0x248>)
 8000eee:	2269      	movs	r2, #105	; 0x69
 8000ef0:	601a      	str	r2, [r3, #0]
}
 8000ef2:	e236      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 110) {
 8000ef4:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <getThreshold+0x244>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b6e      	cmp	r3, #110	; 0x6e
 8000efa:	d803      	bhi.n	8000f04 <getThreshold+0x164>
		threshold = 110;
 8000efc:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <getThreshold+0x248>)
 8000efe:	226e      	movs	r2, #110	; 0x6e
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	e22e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 115) {
 8000f04:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <getThreshold+0x244>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b73      	cmp	r3, #115	; 0x73
 8000f0a:	d803      	bhi.n	8000f14 <getThreshold+0x174>
		threshold = 115;
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <getThreshold+0x248>)
 8000f0e:	2273      	movs	r2, #115	; 0x73
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	e226      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 120) {
 8000f14:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <getThreshold+0x244>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b78      	cmp	r3, #120	; 0x78
 8000f1a:	d803      	bhi.n	8000f24 <getThreshold+0x184>
		threshold = 120;
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <getThreshold+0x248>)
 8000f1e:	2278      	movs	r2, #120	; 0x78
 8000f20:	601a      	str	r2, [r3, #0]
}
 8000f22:	e21e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 125) {
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <getThreshold+0x244>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b7d      	cmp	r3, #125	; 0x7d
 8000f2a:	d803      	bhi.n	8000f34 <getThreshold+0x194>
		threshold = 125;
 8000f2c:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <getThreshold+0x248>)
 8000f2e:	227d      	movs	r2, #125	; 0x7d
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	e216      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 130) {
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <getThreshold+0x244>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b82      	cmp	r3, #130	; 0x82
 8000f3a:	d803      	bhi.n	8000f44 <getThreshold+0x1a4>
		threshold = 130;
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <getThreshold+0x248>)
 8000f3e:	2282      	movs	r2, #130	; 0x82
 8000f40:	601a      	str	r2, [r3, #0]
}
 8000f42:	e20e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 135) {
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <getThreshold+0x244>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b87      	cmp	r3, #135	; 0x87
 8000f4a:	d803      	bhi.n	8000f54 <getThreshold+0x1b4>
		threshold = 135;
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <getThreshold+0x248>)
 8000f4e:	2287      	movs	r2, #135	; 0x87
 8000f50:	601a      	str	r2, [r3, #0]
}
 8000f52:	e206      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 140) {
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <getThreshold+0x244>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b8c      	cmp	r3, #140	; 0x8c
 8000f5a:	d803      	bhi.n	8000f64 <getThreshold+0x1c4>
		threshold = 140;
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <getThreshold+0x248>)
 8000f5e:	228c      	movs	r2, #140	; 0x8c
 8000f60:	601a      	str	r2, [r3, #0]
}
 8000f62:	e1fe      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 145) {
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <getThreshold+0x244>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b91      	cmp	r3, #145	; 0x91
 8000f6a:	d803      	bhi.n	8000f74 <getThreshold+0x1d4>
		threshold = 145;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <getThreshold+0x248>)
 8000f6e:	2291      	movs	r2, #145	; 0x91
 8000f70:	601a      	str	r2, [r3, #0]
}
 8000f72:	e1f6      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 150) {
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <getThreshold+0x244>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b96      	cmp	r3, #150	; 0x96
 8000f7a:	d803      	bhi.n	8000f84 <getThreshold+0x1e4>
		threshold = 150;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <getThreshold+0x248>)
 8000f7e:	2296      	movs	r2, #150	; 0x96
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	e1ee      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 155) {
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <getThreshold+0x244>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b9b      	cmp	r3, #155	; 0x9b
 8000f8a:	d803      	bhi.n	8000f94 <getThreshold+0x1f4>
		threshold = 155;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <getThreshold+0x248>)
 8000f8e:	229b      	movs	r2, #155	; 0x9b
 8000f90:	601a      	str	r2, [r3, #0]
}
 8000f92:	e1e6      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 160) {
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <getThreshold+0x244>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2ba0      	cmp	r3, #160	; 0xa0
 8000f9a:	d803      	bhi.n	8000fa4 <getThreshold+0x204>
		threshold = 160;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <getThreshold+0x248>)
 8000f9e:	22a0      	movs	r2, #160	; 0xa0
 8000fa0:	601a      	str	r2, [r3, #0]
}
 8000fa2:	e1de      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 165) {
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <getThreshold+0x244>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2ba5      	cmp	r3, #165	; 0xa5
 8000faa:	d803      	bhi.n	8000fb4 <getThreshold+0x214>
		threshold = 165;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <getThreshold+0x248>)
 8000fae:	22a5      	movs	r2, #165	; 0xa5
 8000fb0:	601a      	str	r2, [r3, #0]
}
 8000fb2:	e1d6      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 170) {
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <getThreshold+0x244>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2baa      	cmp	r3, #170	; 0xaa
 8000fba:	d803      	bhi.n	8000fc4 <getThreshold+0x224>
		threshold = 170;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <getThreshold+0x248>)
 8000fbe:	22aa      	movs	r2, #170	; 0xaa
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	e1ce      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 175) {
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <getThreshold+0x244>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2baf      	cmp	r3, #175	; 0xaf
 8000fca:	d803      	bhi.n	8000fd4 <getThreshold+0x234>
		threshold = 175;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <getThreshold+0x248>)
 8000fce:	22af      	movs	r2, #175	; 0xaf
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	e1c6      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 180) {
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <getThreshold+0x244>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2bb4      	cmp	r3, #180	; 0xb4
 8000fda:	d807      	bhi.n	8000fec <getThreshold+0x24c>
		threshold = 180;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <getThreshold+0x248>)
 8000fde:	22b4      	movs	r2, #180	; 0xb4
 8000fe0:	601a      	str	r2, [r3, #0]
}
 8000fe2:	e1be      	b.n	8001362 <getThreshold+0x5c2>
 8000fe4:	20000598 	.word	0x20000598
 8000fe8:	200004ac 	.word	0x200004ac
	} else if (myTimerValue <= 185) {
 8000fec:	4b95      	ldr	r3, [pc, #596]	; (8001244 <getThreshold+0x4a4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2bb9      	cmp	r3, #185	; 0xb9
 8000ff2:	d803      	bhi.n	8000ffc <getThreshold+0x25c>
		threshold = 185;
 8000ff4:	4b94      	ldr	r3, [pc, #592]	; (8001248 <getThreshold+0x4a8>)
 8000ff6:	22b9      	movs	r2, #185	; 0xb9
 8000ff8:	601a      	str	r2, [r3, #0]
}
 8000ffa:	e1b2      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 190) {
 8000ffc:	4b91      	ldr	r3, [pc, #580]	; (8001244 <getThreshold+0x4a4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2bbe      	cmp	r3, #190	; 0xbe
 8001002:	d803      	bhi.n	800100c <getThreshold+0x26c>
		threshold = 190;
 8001004:	4b90      	ldr	r3, [pc, #576]	; (8001248 <getThreshold+0x4a8>)
 8001006:	22be      	movs	r2, #190	; 0xbe
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	e1aa      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 195) {
 800100c:	4b8d      	ldr	r3, [pc, #564]	; (8001244 <getThreshold+0x4a4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2bc3      	cmp	r3, #195	; 0xc3
 8001012:	d803      	bhi.n	800101c <getThreshold+0x27c>
		threshold = 195;
 8001014:	4b8c      	ldr	r3, [pc, #560]	; (8001248 <getThreshold+0x4a8>)
 8001016:	22c3      	movs	r2, #195	; 0xc3
 8001018:	601a      	str	r2, [r3, #0]
}
 800101a:	e1a2      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 200) {
 800101c:	4b89      	ldr	r3, [pc, #548]	; (8001244 <getThreshold+0x4a4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2bc8      	cmp	r3, #200	; 0xc8
 8001022:	d803      	bhi.n	800102c <getThreshold+0x28c>
		threshold = 200;
 8001024:	4b88      	ldr	r3, [pc, #544]	; (8001248 <getThreshold+0x4a8>)
 8001026:	22c8      	movs	r2, #200	; 0xc8
 8001028:	601a      	str	r2, [r3, #0]
}
 800102a:	e19a      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 205) {
 800102c:	4b85      	ldr	r3, [pc, #532]	; (8001244 <getThreshold+0x4a4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2bcd      	cmp	r3, #205	; 0xcd
 8001032:	d803      	bhi.n	800103c <getThreshold+0x29c>
		threshold = 205;
 8001034:	4b84      	ldr	r3, [pc, #528]	; (8001248 <getThreshold+0x4a8>)
 8001036:	22cd      	movs	r2, #205	; 0xcd
 8001038:	601a      	str	r2, [r3, #0]
}
 800103a:	e192      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 210) {
 800103c:	4b81      	ldr	r3, [pc, #516]	; (8001244 <getThreshold+0x4a4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2bd2      	cmp	r3, #210	; 0xd2
 8001042:	d803      	bhi.n	800104c <getThreshold+0x2ac>
		threshold = 210;
 8001044:	4b80      	ldr	r3, [pc, #512]	; (8001248 <getThreshold+0x4a8>)
 8001046:	22d2      	movs	r2, #210	; 0xd2
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	e18a      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 215) {
 800104c:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <getThreshold+0x4a4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2bd7      	cmp	r3, #215	; 0xd7
 8001052:	d803      	bhi.n	800105c <getThreshold+0x2bc>
		threshold = 215;
 8001054:	4b7c      	ldr	r3, [pc, #496]	; (8001248 <getThreshold+0x4a8>)
 8001056:	22d7      	movs	r2, #215	; 0xd7
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	e182      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 220) {
 800105c:	4b79      	ldr	r3, [pc, #484]	; (8001244 <getThreshold+0x4a4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2bdc      	cmp	r3, #220	; 0xdc
 8001062:	d803      	bhi.n	800106c <getThreshold+0x2cc>
		threshold = 220;
 8001064:	4b78      	ldr	r3, [pc, #480]	; (8001248 <getThreshold+0x4a8>)
 8001066:	22dc      	movs	r2, #220	; 0xdc
 8001068:	601a      	str	r2, [r3, #0]
}
 800106a:	e17a      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 225) {
 800106c:	4b75      	ldr	r3, [pc, #468]	; (8001244 <getThreshold+0x4a4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2be1      	cmp	r3, #225	; 0xe1
 8001072:	d803      	bhi.n	800107c <getThreshold+0x2dc>
		threshold = 225;
 8001074:	4b74      	ldr	r3, [pc, #464]	; (8001248 <getThreshold+0x4a8>)
 8001076:	22e1      	movs	r2, #225	; 0xe1
 8001078:	601a      	str	r2, [r3, #0]
}
 800107a:	e172      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 230) {
 800107c:	4b71      	ldr	r3, [pc, #452]	; (8001244 <getThreshold+0x4a4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2be6      	cmp	r3, #230	; 0xe6
 8001082:	d803      	bhi.n	800108c <getThreshold+0x2ec>
		threshold = 230;
 8001084:	4b70      	ldr	r3, [pc, #448]	; (8001248 <getThreshold+0x4a8>)
 8001086:	22e6      	movs	r2, #230	; 0xe6
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	e16a      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 235) {
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <getThreshold+0x4a4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2beb      	cmp	r3, #235	; 0xeb
 8001092:	d803      	bhi.n	800109c <getThreshold+0x2fc>
		threshold = 235;
 8001094:	4b6c      	ldr	r3, [pc, #432]	; (8001248 <getThreshold+0x4a8>)
 8001096:	22eb      	movs	r2, #235	; 0xeb
 8001098:	601a      	str	r2, [r3, #0]
}
 800109a:	e162      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 240) {
 800109c:	4b69      	ldr	r3, [pc, #420]	; (8001244 <getThreshold+0x4a4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2bf0      	cmp	r3, #240	; 0xf0
 80010a2:	d803      	bhi.n	80010ac <getThreshold+0x30c>
		threshold = 240;
 80010a4:	4b68      	ldr	r3, [pc, #416]	; (8001248 <getThreshold+0x4a8>)
 80010a6:	22f0      	movs	r2, #240	; 0xf0
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	e15a      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 245) {
 80010ac:	4b65      	ldr	r3, [pc, #404]	; (8001244 <getThreshold+0x4a4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2bf5      	cmp	r3, #245	; 0xf5
 80010b2:	d803      	bhi.n	80010bc <getThreshold+0x31c>
		threshold = 245;
 80010b4:	4b64      	ldr	r3, [pc, #400]	; (8001248 <getThreshold+0x4a8>)
 80010b6:	22f5      	movs	r2, #245	; 0xf5
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	e152      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 250) {
 80010bc:	4b61      	ldr	r3, [pc, #388]	; (8001244 <getThreshold+0x4a4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2bfa      	cmp	r3, #250	; 0xfa
 80010c2:	d803      	bhi.n	80010cc <getThreshold+0x32c>
		threshold = 250;
 80010c4:	4b60      	ldr	r3, [pc, #384]	; (8001248 <getThreshold+0x4a8>)
 80010c6:	22fa      	movs	r2, #250	; 0xfa
 80010c8:	601a      	str	r2, [r3, #0]
}
 80010ca:	e14a      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 255) {
 80010cc:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <getThreshold+0x4a4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2bff      	cmp	r3, #255	; 0xff
 80010d2:	d803      	bhi.n	80010dc <getThreshold+0x33c>
		threshold = 255;
 80010d4:	4b5c      	ldr	r3, [pc, #368]	; (8001248 <getThreshold+0x4a8>)
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	e142      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 260) {
 80010dc:	4b59      	ldr	r3, [pc, #356]	; (8001244 <getThreshold+0x4a4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80010e4:	d804      	bhi.n	80010f0 <getThreshold+0x350>
		threshold = 260;
 80010e6:	4b58      	ldr	r3, [pc, #352]	; (8001248 <getThreshold+0x4a8>)
 80010e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ec:	601a      	str	r2, [r3, #0]
}
 80010ee:	e138      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 265) {
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <getThreshold+0x4a4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80010f8:	d204      	bcs.n	8001104 <getThreshold+0x364>
		threshold = 265;
 80010fa:	4b53      	ldr	r3, [pc, #332]	; (8001248 <getThreshold+0x4a8>)
 80010fc:	f240 1209 	movw	r2, #265	; 0x109
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	e12e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 270) {
 8001104:	4b4f      	ldr	r3, [pc, #316]	; (8001244 <getThreshold+0x4a4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800110c:	d804      	bhi.n	8001118 <getThreshold+0x378>
		threshold = 270;
 800110e:	4b4e      	ldr	r3, [pc, #312]	; (8001248 <getThreshold+0x4a8>)
 8001110:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	e124      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 275) {
 8001118:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <getThreshold+0x4a4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8001120:	d204      	bcs.n	800112c <getThreshold+0x38c>
		threshold = 275;
 8001122:	4b49      	ldr	r3, [pc, #292]	; (8001248 <getThreshold+0x4a8>)
 8001124:	f240 1213 	movw	r2, #275	; 0x113
 8001128:	601a      	str	r2, [r3, #0]
}
 800112a:	e11a      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 280) {
 800112c:	4b45      	ldr	r3, [pc, #276]	; (8001244 <getThreshold+0x4a4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001134:	d804      	bhi.n	8001140 <getThreshold+0x3a0>
		threshold = 280;
 8001136:	4b44      	ldr	r3, [pc, #272]	; (8001248 <getThreshold+0x4a8>)
 8001138:	f44f 728c 	mov.w	r2, #280	; 0x118
 800113c:	601a      	str	r2, [r3, #0]
}
 800113e:	e110      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 285) {
 8001140:	4b40      	ldr	r3, [pc, #256]	; (8001244 <getThreshold+0x4a4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8001148:	d204      	bcs.n	8001154 <getThreshold+0x3b4>
		threshold = 285;
 800114a:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <getThreshold+0x4a8>)
 800114c:	f240 121d 	movw	r2, #285	; 0x11d
 8001150:	601a      	str	r2, [r3, #0]
}
 8001152:	e106      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 290) {
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <getThreshold+0x4a4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800115c:	d804      	bhi.n	8001168 <getThreshold+0x3c8>
		threshold = 290;
 800115e:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <getThreshold+0x4a8>)
 8001160:	f44f 7291 	mov.w	r2, #290	; 0x122
 8001164:	601a      	str	r2, [r3, #0]
}
 8001166:	e0fc      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 295) {
 8001168:	4b36      	ldr	r3, [pc, #216]	; (8001244 <getThreshold+0x4a4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8001170:	d204      	bcs.n	800117c <getThreshold+0x3dc>
		threshold = 295;
 8001172:	4b35      	ldr	r3, [pc, #212]	; (8001248 <getThreshold+0x4a8>)
 8001174:	f240 1227 	movw	r2, #295	; 0x127
 8001178:	601a      	str	r2, [r3, #0]
}
 800117a:	e0f2      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 300) {
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <getThreshold+0x4a4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001184:	d804      	bhi.n	8001190 <getThreshold+0x3f0>
		threshold = 300;
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <getThreshold+0x4a8>)
 8001188:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800118c:	601a      	str	r2, [r3, #0]
}
 800118e:	e0e8      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 305) {
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <getThreshold+0x4a4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001198:	d204      	bcs.n	80011a4 <getThreshold+0x404>
		threshold = 305;
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <getThreshold+0x4a8>)
 800119c:	f240 1231 	movw	r2, #305	; 0x131
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	e0de      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 310) {
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <getThreshold+0x4a4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80011ac:	d804      	bhi.n	80011b8 <getThreshold+0x418>
		threshold = 310;
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <getThreshold+0x4a8>)
 80011b0:	f44f 729b 	mov.w	r2, #310	; 0x136
 80011b4:	601a      	str	r2, [r3, #0]
}
 80011b6:	e0d4      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 315) {
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <getThreshold+0x4a4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80011c0:	d204      	bcs.n	80011cc <getThreshold+0x42c>
		threshold = 315;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <getThreshold+0x4a8>)
 80011c4:	f240 123b 	movw	r2, #315	; 0x13b
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	e0ca      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 320) {
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <getThreshold+0x4a4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011d4:	d804      	bhi.n	80011e0 <getThreshold+0x440>
		threshold = 320;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <getThreshold+0x4a8>)
 80011d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011dc:	601a      	str	r2, [r3, #0]
}
 80011de:	e0c0      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 325) {
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <getThreshold+0x4a4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 80011e8:	d204      	bcs.n	80011f4 <getThreshold+0x454>
		threshold = 325;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <getThreshold+0x4a8>)
 80011ec:	f240 1245 	movw	r2, #325	; 0x145
 80011f0:	601a      	str	r2, [r3, #0]
}
 80011f2:	e0b6      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 330) {
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <getThreshold+0x4a4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80011fc:	d804      	bhi.n	8001208 <getThreshold+0x468>
		threshold = 330;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <getThreshold+0x4a8>)
 8001200:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001204:	601a      	str	r2, [r3, #0]
}
 8001206:	e0ac      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 335) {
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <getThreshold+0x4a4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8001210:	d204      	bcs.n	800121c <getThreshold+0x47c>
		threshold = 335;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <getThreshold+0x4a8>)
 8001214:	f240 124f 	movw	r2, #335	; 0x14f
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	e0a2      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 340) {
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <getThreshold+0x4a4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001224:	d804      	bhi.n	8001230 <getThreshold+0x490>
		threshold = 340;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <getThreshold+0x4a8>)
 8001228:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800122c:	601a      	str	r2, [r3, #0]
}
 800122e:	e098      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 345) {
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <getThreshold+0x4a4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 8001238:	d208      	bcs.n	800124c <getThreshold+0x4ac>
		threshold = 345;
 800123a:	4b03      	ldr	r3, [pc, #12]	; (8001248 <getThreshold+0x4a8>)
 800123c:	f240 1259 	movw	r2, #345	; 0x159
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	e08e      	b.n	8001362 <getThreshold+0x5c2>
 8001244:	20000598 	.word	0x20000598
 8001248:	200004ac 	.word	0x200004ac
	} else if (myTimerValue <= 350) {
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <getThreshold+0x5cc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001254:	d804      	bhi.n	8001260 <getThreshold+0x4c0>
		threshold = 350;
 8001256:	4b46      	ldr	r3, [pc, #280]	; (8001370 <getThreshold+0x5d0>)
 8001258:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800125c:	601a      	str	r2, [r3, #0]
}
 800125e:	e080      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 355) {
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <getThreshold+0x5cc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8001268:	d204      	bcs.n	8001274 <getThreshold+0x4d4>
		threshold = 355;
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <getThreshold+0x5d0>)
 800126c:	f240 1263 	movw	r2, #355	; 0x163
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	e076      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 360) {
 8001274:	4b3d      	ldr	r3, [pc, #244]	; (800136c <getThreshold+0x5cc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800127c:	d804      	bhi.n	8001288 <getThreshold+0x4e8>
		threshold = 360;
 800127e:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <getThreshold+0x5d0>)
 8001280:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001284:	601a      	str	r2, [r3, #0]
}
 8001286:	e06c      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 365) {
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <getThreshold+0x5cc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8001290:	d204      	bcs.n	800129c <getThreshold+0x4fc>
		threshold = 365;
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <getThreshold+0x5d0>)
 8001294:	f240 126d 	movw	r2, #365	; 0x16d
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	e062      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 370) {
 800129c:	4b33      	ldr	r3, [pc, #204]	; (800136c <getThreshold+0x5cc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 80012a4:	d804      	bhi.n	80012b0 <getThreshold+0x510>
		threshold = 370;
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <getThreshold+0x5d0>)
 80012a8:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	e058      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 375) {
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <getThreshold+0x5cc>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 80012b8:	d204      	bcs.n	80012c4 <getThreshold+0x524>
		threshold = 375;
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <getThreshold+0x5d0>)
 80012bc:	f240 1277 	movw	r2, #375	; 0x177
 80012c0:	601a      	str	r2, [r3, #0]
}
 80012c2:	e04e      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 380) {
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <getThreshold+0x5cc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 80012cc:	d804      	bhi.n	80012d8 <getThreshold+0x538>
		threshold = 380;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <getThreshold+0x5d0>)
 80012d0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80012d4:	601a      	str	r2, [r3, #0]
}
 80012d6:	e044      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 385) {
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <getThreshold+0x5cc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80012e0:	d204      	bcs.n	80012ec <getThreshold+0x54c>
		threshold = 385;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <getThreshold+0x5d0>)
 80012e4:	f240 1281 	movw	r2, #385	; 0x181
 80012e8:	601a      	str	r2, [r3, #0]
}
 80012ea:	e03a      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 390) {
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <getThreshold+0x5cc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80012f4:	d804      	bhi.n	8001300 <getThreshold+0x560>
		threshold = 390;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <getThreshold+0x5d0>)
 80012f8:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80012fc:	601a      	str	r2, [r3, #0]
}
 80012fe:	e030      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 395) {
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <getThreshold+0x5cc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8001308:	d204      	bcs.n	8001314 <getThreshold+0x574>
		threshold = 395;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <getThreshold+0x5d0>)
 800130c:	f240 128b 	movw	r2, #395	; 0x18b
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	e026      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 400) {
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <getThreshold+0x5cc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800131c:	d804      	bhi.n	8001328 <getThreshold+0x588>
		threshold = 400;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <getThreshold+0x5d0>)
 8001320:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001324:	601a      	str	r2, [r3, #0]
}
 8001326:	e01c      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 405) {
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <getThreshold+0x5cc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8001330:	d204      	bcs.n	800133c <getThreshold+0x59c>
		threshold = 405;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <getThreshold+0x5d0>)
 8001334:	f240 1295 	movw	r2, #405	; 0x195
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	e012      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 410) {
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <getThreshold+0x5cc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8001344:	d804      	bhi.n	8001350 <getThreshold+0x5b0>
		threshold = 410;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <getThreshold+0x5d0>)
 8001348:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	e008      	b.n	8001362 <getThreshold+0x5c2>
	} else if (myTimerValue <= 415) {
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <getThreshold+0x5cc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8001358:	d203      	bcs.n	8001362 <getThreshold+0x5c2>
		threshold = 415;
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <getThreshold+0x5d0>)
 800135c:	f240 129f 	movw	r2, #415	; 0x19f
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000598 	.word	0x20000598
 8001370:	200004ac 	.word	0x200004ac

08001374 <I2C_Scan>:

void I2C_Scan() {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	//char info[] = "Scanning I2C bus...\r\n";
	//HAL_UART_Transmit(&huart2, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);

	HAL_StatusTypeDef res;
	for (uint16_t i = 0; i < 128; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	80fb      	strh	r3, [r7, #6]
 800137e:	e00c      	b.n	800139a <I2C_Scan+0x26>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	b299      	uxth	r1, r3
 8001386:	230a      	movs	r3, #10
 8001388:	2201      	movs	r2, #1
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <I2C_Scan+0x34>)
 800138c:	f001 fc4a 	bl	8002c24 <HAL_I2C_IsDeviceReady>
 8001390:	4603      	mov	r3, r0
 8001392:	717b      	strb	r3, [r7, #5]
	for (uint16_t i = 0; i < 128; i++) {
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	3301      	adds	r3, #1
 8001398:	80fb      	strh	r3, [r7, #6]
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	2b7f      	cmp	r3, #127	; 0x7f
 800139e:	d9ef      	bls.n	8001380 <I2C_Scan+0xc>
			//HAL_UART_Transmit(&huart2, (uint8_t*) ".", 1, HAL_MAX_DELAY);
		}
	}

	//HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200004b0 	.word	0x200004b0

080013ac <init>:

void init() {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	I2C_Scan();
 80013b0:	f7ff ffe0 	bl	8001374 <I2C_Scan>
	ssd1306_Init();
 80013b4:	f000 f856 	bl	8001464 <ssd1306_Init>
	//ssd1306_TestAll();
	//ssd1306_TestFonts();

	ssd1306_Fill(Black);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f8c1 	bl	8001540 <ssd1306_Fill>
	ssd1306_SetCursor(2, 28);
 80013be:	211c      	movs	r1, #28
 80013c0:	2002      	movs	r0, #2
 80013c2:	f000 fa0b 	bl	80017dc <ssd1306_SetCursor>
	ssd1306_WriteString(" Hi SCM!", Font_16x26, White);
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <init+0x30>)
 80013c8:	2301      	movs	r3, #1
 80013ca:	ca06      	ldmia	r2, {r1, r2}
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <init+0x34>)
 80013ce:	f000 f9df 	bl	8001790 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80013d2:	f000 f8d7 	bl	8001584 <ssd1306_UpdateScreen>
//	HAL_Delay(500);
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000000 	.word	0x20000000
 80013e0:	08004bd0 	.word	0x08004bd0

080013e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <ssd1306_Reset>:
#include "ssd1306.h"

void ssd1306_Reset(void) {
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af04      	add	r7, sp, #16
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, 1000);
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2301      	movs	r3, #1
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	1dfb      	adds	r3, r7, #7
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	2200      	movs	r2, #0
 800141c:	2178      	movs	r1, #120	; 0x78
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <ssd1306_WriteCommand+0x2c>)
 8001420:	f001 fb06 	bl	8002a30 <HAL_I2C_Mem_Write>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200004b0 	.word	0x200004b0

08001430 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af04      	add	r7, sp, #16
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, 1000);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001442:	9202      	str	r2, [sp, #8]
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	2178      	movs	r1, #120	; 0x78
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <ssd1306_WriteData+0x30>)
 8001452:	f001 faed 	bl	8002a30 <HAL_I2C_Mem_Write>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200004b0 	.word	0x200004b0

08001464 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001468:	f7ff ffc3 	bl	80013f2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800146c:	2064      	movs	r0, #100	; 0x64
 800146e:	f000 fbd5 	bl	8001c1c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001472:	20ae      	movs	r0, #174	; 0xae
 8001474:	f7ff ffc4 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001478:	2020      	movs	r0, #32
 800147a:	f7ff ffc1 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 800147e:	2010      	movs	r0, #16
 8001480:	f7ff ffbe 	bl	8001400 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001484:	20b0      	movs	r0, #176	; 0xb0
 8001486:	f7ff ffbb 	bl	8001400 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800148a:	20c8      	movs	r0, #200	; 0xc8
 800148c:	f7ff ffb8 	bl	8001400 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff ffb5 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001496:	2010      	movs	r0, #16
 8001498:	f7ff ffb2 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800149c:	2040      	movs	r0, #64	; 0x40
 800149e:	f7ff ffaf 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80014a2:	2081      	movs	r0, #129	; 0x81
 80014a4:	f7ff ffac 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80014a8:	20ff      	movs	r0, #255	; 0xff
 80014aa:	f7ff ffa9 	bl	8001400 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80014ae:	20a1      	movs	r0, #161	; 0xa1
 80014b0:	f7ff ffa6 	bl	8001400 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80014b4:	20a6      	movs	r0, #166	; 0xa6
 80014b6:	f7ff ffa3 	bl	8001400 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80014ba:	20a8      	movs	r0, #168	; 0xa8
 80014bc:	f7ff ffa0 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80014c0:	203f      	movs	r0, #63	; 0x3f
 80014c2:	f7ff ff9d 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014c6:	20a4      	movs	r0, #164	; 0xa4
 80014c8:	f7ff ff9a 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80014cc:	20d3      	movs	r0, #211	; 0xd3
 80014ce:	f7ff ff97 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ff94 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80014d8:	20d5      	movs	r0, #213	; 0xd5
 80014da:	f7ff ff91 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80014de:	20f0      	movs	r0, #240	; 0xf0
 80014e0:	f7ff ff8e 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80014e4:	20d9      	movs	r0, #217	; 0xd9
 80014e6:	f7ff ff8b 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80014ea:	2022      	movs	r0, #34	; 0x22
 80014ec:	f7ff ff88 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80014f0:	20da      	movs	r0, #218	; 0xda
 80014f2:	f7ff ff85 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80014f6:	2012      	movs	r0, #18
 80014f8:	f7ff ff82 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80014fc:	20db      	movs	r0, #219	; 0xdb
 80014fe:	f7ff ff7f 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001502:	2020      	movs	r0, #32
 8001504:	f7ff ff7c 	bl	8001400 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001508:	208d      	movs	r0, #141	; 0x8d
 800150a:	f7ff ff79 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800150e:	2014      	movs	r0, #20
 8001510:	f7ff ff76 	bl	8001400 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001514:	20af      	movs	r0, #175	; 0xaf
 8001516:	f7ff ff73 	bl	8001400 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f810 	bl	8001540 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001520:	f000 f830 	bl	8001584 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <ssd1306_Init+0xd8>)
 8001526:	2200      	movs	r2, #0
 8001528:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <ssd1306_Init+0xd8>)
 800152c:	2200      	movs	r2, #0
 800152e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <ssd1306_Init+0xd8>)
 8001532:	2201      	movs	r2, #1
 8001534:	715a      	strb	r2, [r3, #5]
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000498 	.word	0x20000498

08001540 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	e00d      	b.n	800156c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <ssd1306_Fill+0x1a>
 8001556:	2100      	movs	r1, #0
 8001558:	e000      	b.n	800155c <ssd1306_Fill+0x1c>
 800155a:	21ff      	movs	r1, #255	; 0xff
 800155c:	4a08      	ldr	r2, [pc, #32]	; (8001580 <ssd1306_Fill+0x40>)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	460a      	mov	r2, r1
 8001564:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3301      	adds	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001572:	d3ed      	bcc.n	8001550 <ssd1306_Fill+0x10>
    }
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20000098 	.word	0x20000098

08001584 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	e016      	b.n	80015be <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	3b50      	subs	r3, #80	; 0x50
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff32 	bl	8001400 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff ff2f 	bl	8001400 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80015a2:	2010      	movs	r0, #16
 80015a4:	f7ff ff2c 	bl	8001400 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	01db      	lsls	r3, r3, #7
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <ssd1306_UpdateScreen+0x48>)
 80015ae:	4413      	add	r3, r2
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff3c 	bl	8001430 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	3301      	adds	r3, #1
 80015bc:	71fb      	strb	r3, [r7, #7]
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b07      	cmp	r3, #7
 80015c2:	d9e5      	bls.n	8001590 <ssd1306_UpdateScreen+0xc>
    }
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000098 	.word	0x20000098

080015d0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
 80015da:	460b      	mov	r3, r1
 80015dc:	71bb      	strb	r3, [r7, #6]
 80015de:	4613      	mov	r3, r2
 80015e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db48      	blt.n	800167c <ssd1306_DrawPixel+0xac>
 80015ea:	79bb      	ldrb	r3, [r7, #6]
 80015ec:	2b3f      	cmp	r3, #63	; 0x3f
 80015ee:	d845      	bhi.n	800167c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <ssd1306_DrawPixel+0xb8>)
 80015f2:	791b      	ldrb	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80015f8:	797b      	ldrb	r3, [r7, #5]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf0c      	ite	eq
 80015fe:	2301      	moveq	r3, #1
 8001600:	2300      	movne	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001606:	797b      	ldrb	r3, [r7, #5]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d11a      	bne.n	8001642 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800160c:	79fa      	ldrb	r2, [r7, #7]
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	b2d8      	uxtb	r0, r3
 8001614:	4603      	mov	r3, r0
 8001616:	01db      	lsls	r3, r3, #7
 8001618:	4413      	add	r3, r2
 800161a:	4a1c      	ldr	r2, [pc, #112]	; (800168c <ssd1306_DrawPixel+0xbc>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	b25a      	sxtb	r2, r3
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	b25b      	sxtb	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b259      	sxtb	r1, r3
 8001632:	79fa      	ldrb	r2, [r7, #7]
 8001634:	4603      	mov	r3, r0
 8001636:	01db      	lsls	r3, r3, #7
 8001638:	4413      	add	r3, r2
 800163a:	b2c9      	uxtb	r1, r1
 800163c:	4a13      	ldr	r2, [pc, #76]	; (800168c <ssd1306_DrawPixel+0xbc>)
 800163e:	54d1      	strb	r1, [r2, r3]
 8001640:	e01d      	b.n	800167e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	b2d8      	uxtb	r0, r3
 800164a:	4603      	mov	r3, r0
 800164c:	01db      	lsls	r3, r3, #7
 800164e:	4413      	add	r3, r2
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <ssd1306_DrawPixel+0xbc>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	b25a      	sxtb	r2, r3
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	b25b      	sxtb	r3, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	b25b      	sxtb	r3, r3
 8001668:	4013      	ands	r3, r2
 800166a:	b259      	sxtb	r1, r3
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	4603      	mov	r3, r0
 8001670:	01db      	lsls	r3, r3, #7
 8001672:	4413      	add	r3, r2
 8001674:	b2c9      	uxtb	r1, r1
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <ssd1306_DrawPixel+0xbc>)
 8001678:	54d1      	strb	r1, [r2, r3]
 800167a:	e000      	b.n	800167e <ssd1306_DrawPixel+0xae>
        return;
 800167c:	bf00      	nop
    }
}
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	20000498 	.word	0x20000498
 800168c:	20000098 	.word	0x20000098

08001690 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	4604      	mov	r4, r0
 8001698:	1d38      	adds	r0, r7, #4
 800169a:	e880 0006 	stmia.w	r0, {r1, r2}
 800169e:	461a      	mov	r2, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	4613      	mov	r3, r2
 80016a6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80016a8:	4b38      	ldr	r3, [pc, #224]	; (800178c <ssd1306_WriteChar+0xfc>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	793b      	ldrb	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	2b7f      	cmp	r3, #127	; 0x7f
 80016b4:	dc06      	bgt.n	80016c4 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80016b6:	4b35      	ldr	r3, [pc, #212]	; (800178c <ssd1306_WriteChar+0xfc>)
 80016b8:	885b      	ldrh	r3, [r3, #2]
 80016ba:	461a      	mov	r2, r3
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80016c0:	2b3f      	cmp	r3, #63	; 0x3f
 80016c2:	dd01      	ble.n	80016c8 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e05d      	b.n	8001784 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	e04c      	b.n	8001768 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	3b20      	subs	r3, #32
 80016d4:	7979      	ldrb	r1, [r7, #5]
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	440b      	add	r3, r1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	e034      	b.n	8001758 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d012      	beq.n	8001724 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <ssd1306_WriteChar+0xfc>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	4413      	add	r3, r2
 800170a:	b2d8      	uxtb	r0, r3
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <ssd1306_WriteChar+0xfc>)
 800170e:	885b      	ldrh	r3, [r3, #2]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4413      	add	r3, r2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	7bba      	ldrb	r2, [r7, #14]
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff ff57 	bl	80015d0 <ssd1306_DrawPixel>
 8001722:	e016      	b.n	8001752 <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <ssd1306_WriteChar+0xfc>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4413      	add	r3, r2
 8001730:	b2d8      	uxtb	r0, r3
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <ssd1306_WriteChar+0xfc>)
 8001734:	885b      	ldrh	r3, [r3, #2]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4413      	add	r3, r2
 800173e:	b2d9      	uxtb	r1, r3
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf0c      	ite	eq
 8001746:	2301      	moveq	r3, #1
 8001748:	2300      	movne	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	f7ff ff3f 	bl	80015d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	3301      	adds	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	793b      	ldrb	r3, [r7, #4]
 800175a:	461a      	mov	r2, r3
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	4293      	cmp	r3, r2
 8001760:	d3c5      	bcc.n	80016ee <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	461a      	mov	r2, r3
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	4293      	cmp	r3, r2
 8001770:	d3ad      	bcc.n	80016ce <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <ssd1306_WriteChar+0xfc>)
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	793b      	ldrb	r3, [r7, #4]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b03      	ldr	r3, [pc, #12]	; (800178c <ssd1306_WriteChar+0xfc>)
 8001780:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3724      	adds	r7, #36	; 0x24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	20000498 	.word	0x20000498

08001790 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	1d38      	adds	r0, r7, #4
 800179a:	e880 0006 	stmia.w	r0, {r1, r2}
 800179e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80017a0:	e012      	b.n	80017c8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	7818      	ldrb	r0, [r3, #0]
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	1d3a      	adds	r2, r7, #4
 80017aa:	ca06      	ldmia	r2, {r1, r2}
 80017ac:	f7ff ff70 	bl	8001690 <ssd1306_WriteChar>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d002      	beq.n	80017c2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	e008      	b.n	80017d4 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e8      	bne.n	80017a2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	781b      	ldrb	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	460a      	mov	r2, r1
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	4613      	mov	r3, r2
 80017ea:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <ssd1306_SetCursor+0x2c>)
 80017f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <ssd1306_SetCursor+0x2c>)
 80017fa:	805a      	strh	r2, [r3, #2]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	20000498 	.word	0x20000498

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_MspInit+0x4c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_MspInit+0x4c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_ADC_MspInit+0x7c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d127      	bne.n	80018ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_ADC_MspInit+0x80>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a15      	ldr	r2, [pc, #84]	; (80018dc <HAL_ADC_MspInit+0x80>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <HAL_ADC_MspInit+0x80>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_ADC_MspInit+0x80>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_ADC_MspInit+0x80>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_ADC_MspInit+0x80>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b6:	2301      	movs	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <HAL_ADC_MspInit+0x84>)
 80018ca:	f000 fdc5 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40012000 	.word	0x40012000
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000

080018e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a19      	ldr	r2, [pc, #100]	; (8001968 <HAL_I2C_MspInit+0x84>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d12c      	bne.n	8001960 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_I2C_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a17      	ldr	r2, [pc, #92]	; (800196c <HAL_I2C_MspInit+0x88>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_I2C_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001928:	2312      	movs	r3, #18
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001934:	2304      	movs	r3, #4
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	480c      	ldr	r0, [pc, #48]	; (8001970 <HAL_I2C_MspInit+0x8c>)
 8001940:	f000 fd8a 	bl	8002458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_I2C_MspInit+0x88>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_I2C_MspInit+0x88>)
 800194e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_I2C_MspInit+0x88>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40005400 	.word	0x40005400
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	; (80019f8 <HAL_UART_MspInit+0x84>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d12b      	bne.n	80019ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_UART_MspInit+0x88>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a17      	ldr	r2, [pc, #92]	; (80019fc <HAL_UART_MspInit+0x88>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_UART_MspInit+0x88>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_UART_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <HAL_UART_MspInit+0x88>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_UART_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ce:	230c      	movs	r3, #12
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019de:	2307      	movs	r3, #7
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <HAL_UART_MspInit+0x8c>)
 80019ea:	f000 fd35 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40004400 	.word	0x40004400
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f8c0 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <_sbrk+0x50>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <_sbrk+0x16>
		heap_end = &end;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <_sbrk+0x50>)
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <_sbrk+0x54>)
 8001a74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <_sbrk+0x50>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <_sbrk+0x50>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	466a      	mov	r2, sp
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d907      	bls.n	8001a9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a8a:	f002 fc41 	bl	8004310 <__errno>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	230c      	movs	r3, #12
 8001a92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	e006      	b.n	8001aa8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <_sbrk+0x50>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <_sbrk+0x50>)
 8001aa4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200004a0 	.word	0x200004a0
 8001ab4:	200005a8 	.word	0x200005a8

08001ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <SystemInit+0x28>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <SystemInit+0x28>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SystemInit+0x28>)
 8001ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ae8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aea:	e003      	b.n	8001af4 <LoopCopyDataInit>

08001aec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001af0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001af2:	3104      	adds	r1, #4

08001af4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001af4:	480b      	ldr	r0, [pc, #44]	; (8001b24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001af8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001afa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001afc:	d3f6      	bcc.n	8001aec <CopyDataInit>
  ldr  r2, =_sbss
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b00:	e002      	b.n	8001b08 <LoopFillZerobss>

08001b02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b04:	f842 3b04 	str.w	r3, [r2], #4

08001b08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b0c:	d3f9      	bcc.n	8001b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b0e:	f7ff ffd3 	bl	8001ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b12:	f002 fc03 	bl	800431c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b16:	f7fe ff0f 	bl	8000938 <main>
  bx  lr    
 8001b1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b1c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001b20:	08005f84 	.word	0x08005f84
  ldr  r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b28:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001b2c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001b30:	200005a4 	.word	0x200005a4

08001b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC_IRQHandler>
	...

08001b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <HAL_Init+0x40>)
 8001b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_Init+0x40>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_Init+0x40>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 fc45 	bl	80023f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f000 f808 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6c:	f7ff fe4e 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023c00 	.word	0x40023c00

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x54>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_InitTick+0x58>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fc4f 	bl	800243e <HAL_SYSTICK_Config>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00e      	b.n	8001bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d80a      	bhi.n	8001bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f000 fc25 	bl	8002406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bbc:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <HAL_InitTick+0x5c>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20000010 	.word	0x20000010
 8001bd8:	2000000c 	.word	0x2000000c

08001bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_IncTick+0x20>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_IncTick+0x24>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <HAL_IncTick+0x24>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000010 	.word	0x20000010
 8001c00:	2000059c 	.word	0x2000059c

08001c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return uwTick;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_GetTick+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	2000059c 	.word	0x2000059c

08001c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c24:	f7ff ffee 	bl	8001c04 <HAL_GetTick>
 8001c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d005      	beq.n	8001c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_Delay+0x40>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c42:	bf00      	nop
 8001c44:	f7ff ffde 	bl	8001c04 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d8f7      	bhi.n	8001c44 <HAL_Delay+0x28>
  {
  }
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000010 	.word	0x20000010

08001c60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e033      	b.n	8001cde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fdec 	bl	800185c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca6:	f023 0302 	bic.w	r3, r3, #2
 8001caa:	f043 0202 	orr.w	r2, r3, #2
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f9ee 	bl	8002094 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cce:	e001      	b.n	8001cd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_Start+0x1a>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e08a      	b.n	8001e18 <HAL_ADC_Start+0x130>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d018      	beq.n	8001d4a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d28:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_ADC_Start+0x13c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a3e      	ldr	r2, [pc, #248]	; (8001e28 <HAL_ADC_Start+0x140>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0c9a      	lsrs	r2, r3, #18
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d15e      	bne.n	8001e16 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d96:	d106      	bne.n	8001da6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f023 0206 	bic.w	r2, r3, #6
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44
 8001da4:	e002      	b.n	8001dac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_ADC_Start+0x144>)
 8001db6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dc0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d11c      	bne.n	8001e16 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	e013      	b.n	8001e16 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_ADC_Start+0x148>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d10e      	bne.n	8001e16 <HAL_ADC_Start+0x12e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e14:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000008 	.word	0x20000008
 8001e28:	431bde83 	.word	0x431bde83
 8001e2c:	40012300 	.word	0x40012300
 8001e30:	40012000 	.word	0x40012000

08001e34 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1c>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e105      	b.n	8002078 <HAL_ADC_ConfigChannel+0x228>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b09      	cmp	r3, #9
 8001e7a:	d925      	bls.n	8001ec8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68d9      	ldr	r1, [r3, #12]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b1e      	subs	r3, #30
 8001e92:	2207      	movs	r2, #7
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4403      	add	r3, r0
 8001eba:	3b1e      	subs	r3, #30
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	e022      	b.n	8001f0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	2207      	movs	r2, #7
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	400a      	ands	r2, r1
 8001eea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4403      	add	r3, r0
 8001f04:	409a      	lsls	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d824      	bhi.n	8001f60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b05      	subs	r3, #5
 8001f28:	221f      	movs	r2, #31
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	400a      	ands	r2, r1
 8001f36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b05      	subs	r3, #5
 8001f52:	fa00 f203 	lsl.w	r2, r0, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5e:	e04c      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d824      	bhi.n	8001fb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b23      	subs	r3, #35	; 0x23
 8001f7a:	221f      	movs	r2, #31
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43da      	mvns	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	400a      	ands	r2, r1
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b23      	subs	r3, #35	; 0x23
 8001fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb0:	e023      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b41      	subs	r3, #65	; 0x41
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b41      	subs	r3, #65	; 0x41
 8001fee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_ADC_ConfigChannel+0x234>)
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <HAL_ADC_ConfigChannel+0x238>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d109      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1cc>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b12      	cmp	r3, #18
 800200e:	d105      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_ADC_ConfigChannel+0x238>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d123      	bne.n	800206e <HAL_ADC_ConfigChannel+0x21e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b10      	cmp	r3, #16
 800202c:	d003      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x1e6>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b11      	cmp	r3, #17
 8002034:	d11b      	bne.n	800206e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b10      	cmp	r3, #16
 8002048:	d111      	bne.n	800206e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_ADC_ConfigChannel+0x23c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_ADC_ConfigChannel+0x240>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9a      	lsrs	r2, r3, #18
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002060:	e002      	b.n	8002068 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40012300 	.word	0x40012300
 8002088:	40012000 	.word	0x40012000
 800208c:	20000008 	.word	0x20000008
 8002090:	431bde83 	.word	0x431bde83

08002094 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800209c:	4b79      	ldr	r3, [pc, #484]	; (8002284 <ADC_Init+0x1f0>)
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	021a      	lsls	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	4a58      	ldr	r2, [pc, #352]	; (8002288 <ADC_Init+0x1f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800213a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800215c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e00f      	b.n	8002192 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002190:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0202 	bic.w	r2, r2, #2
 80021a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e1b      	ldrb	r3, [r3, #24]
 80021ac:	005a      	lsls	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	3b01      	subs	r3, #1
 80021ec:	035a      	lsls	r2, r3, #13
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	e007      	b.n	8002208 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002206:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	3b01      	subs	r3, #1
 8002224:	051a      	lsls	r2, r3, #20
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800223c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800224a:	025a      	lsls	r2, r3, #9
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002262:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	029a      	lsls	r2, r3, #10
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40012300 	.word	0x40012300
 8002288:	0f000001 	.word	0x0f000001

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023bc:	d301      	bcc.n	80023c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023be:	2301      	movs	r3, #1
 80023c0:	e00f      	b.n	80023e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <SysTick_Config+0x40>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ca:	210f      	movs	r1, #15
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f7ff ff8e 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <SysTick_Config+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <SysTick_Config+0x40>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff47 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002418:	f7ff ff5c 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 800241c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f7ff ff8e 	bl	8002344 <NVIC_EncodePriority>
 8002428:	4602      	mov	r2, r0
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5d 	bl	80022f0 <__NVIC_SetPriority>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ffb0 	bl	80023ac <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e159      	b.n	8002728 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8148 	bne.w	8002722 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d00b      	beq.n	80024b2 <HAL_GPIO_Init+0x5a>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a6:	2b11      	cmp	r3, #17
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b12      	cmp	r3, #18
 80024b0:	d130      	bne.n	8002514 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0201 	and.w	r2, r3, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0xfc>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b12      	cmp	r3, #18
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a2 	beq.w	8002722 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_GPIO_Init+0x2e4>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_GPIO_Init+0x2e4>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	; 0x44
 80025ee:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_GPIO_Init+0x2e4>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fa:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_GPIO_Init+0x2e8>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a48      	ldr	r2, [pc, #288]	; (8002744 <HAL_GPIO_Init+0x2ec>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0x202>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a47      	ldr	r2, [pc, #284]	; (8002748 <HAL_GPIO_Init+0x2f0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x1fe>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a46      	ldr	r2, [pc, #280]	; (800274c <HAL_GPIO_Init+0x2f4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x1fa>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a45      	ldr	r2, [pc, #276]	; (8002750 <HAL_GPIO_Init+0x2f8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x1f6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a44      	ldr	r2, [pc, #272]	; (8002754 <HAL_GPIO_Init+0x2fc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x1f2>
 8002646:	2304      	movs	r3, #4
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x204>
 800264a:	2307      	movs	r3, #7
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x204>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x204>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x204>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x204>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4934      	ldr	r1, [pc, #208]	; (8002740 <HAL_GPIO_Init+0x2e8>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267a:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_GPIO_Init+0x300>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269e:	4a2e      	ldr	r2, [pc, #184]	; (8002758 <HAL_GPIO_Init+0x300>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_GPIO_Init+0x300>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c8:	4a23      	ldr	r2, [pc, #140]	; (8002758 <HAL_GPIO_Init+0x300>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_GPIO_Init+0x300>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f2:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_GPIO_Init+0x300>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f8:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_GPIO_Init+0x300>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800271c:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_GPIO_Init+0x300>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f aea2 	bls.w	8002474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	3724      	adds	r7, #36	; 0x24
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40023800 	.word	0x40023800
 8002740:	40013800 	.word	0x40013800
 8002744:	40020000 	.word	0x40020000
 8002748:	40020400 	.word	0x40020400
 800274c:	40020800 	.word	0x40020800
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40021000 	.word	0x40021000
 8002758:	40013c00 	.word	0x40013c00

0800275c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e001      	b.n	800277e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
 8002798:	4613      	mov	r3, r2
 800279a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800279c:	787b      	ldrb	r3, [r7, #1]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a8:	e003      	b.n	80027b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e11f      	b.n	8002a12 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff f87c 	bl	80018e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2224      	movs	r2, #36	; 0x24
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002824:	f001 f982 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 8002828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a7b      	ldr	r2, [pc, #492]	; (8002a1c <HAL_I2C_Init+0x25c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d807      	bhi.n	8002844 <HAL_I2C_Init+0x84>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a7a      	ldr	r2, [pc, #488]	; (8002a20 <HAL_I2C_Init+0x260>)
 8002838:	4293      	cmp	r3, r2
 800283a:	bf94      	ite	ls
 800283c:	2301      	movls	r3, #1
 800283e:	2300      	movhi	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e006      	b.n	8002852 <HAL_I2C_Init+0x92>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a77      	ldr	r2, [pc, #476]	; (8002a24 <HAL_I2C_Init+0x264>)
 8002848:	4293      	cmp	r3, r2
 800284a:	bf94      	ite	ls
 800284c:	2301      	movls	r3, #1
 800284e:	2300      	movhi	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0db      	b.n	8002a12 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4a72      	ldr	r2, [pc, #456]	; (8002a28 <HAL_I2C_Init+0x268>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9b      	lsrs	r3, r3, #18
 8002864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	430a      	orrs	r2, r1
 8002878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a64      	ldr	r2, [pc, #400]	; (8002a1c <HAL_I2C_Init+0x25c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d802      	bhi.n	8002894 <HAL_I2C_Init+0xd4>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3301      	adds	r3, #1
 8002892:	e009      	b.n	80028a8 <HAL_I2C_Init+0xe8>
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	4a63      	ldr	r2, [pc, #396]	; (8002a2c <HAL_I2C_Init+0x26c>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	3301      	adds	r3, #1
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4956      	ldr	r1, [pc, #344]	; (8002a1c <HAL_I2C_Init+0x25c>)
 80028c4:	428b      	cmp	r3, r1
 80028c6:	d80d      	bhi.n	80028e4 <HAL_I2C_Init+0x124>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1e59      	subs	r1, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028dc:	2b04      	cmp	r3, #4
 80028de:	bf38      	it	cc
 80028e0:	2304      	movcc	r3, #4
 80028e2:	e04f      	b.n	8002984 <HAL_I2C_Init+0x1c4>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <HAL_I2C_Init+0x150>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e58      	subs	r0, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e012      	b.n	8002936 <HAL_I2C_Init+0x176>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x17e>
 800293a:	2301      	movs	r3, #1
 800293c:	e022      	b.n	8002984 <HAL_I2C_Init+0x1c4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <HAL_I2C_Init+0x1a4>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e58      	subs	r0, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	440b      	add	r3, r1
 8002954:	fbb0 f3f3 	udiv	r3, r0, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002962:	e00f      	b.n	8002984 <HAL_I2C_Init+0x1c4>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	0099      	lsls	r1, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	6809      	ldr	r1, [r1, #0]
 8002988:	4313      	orrs	r3, r2
 800298a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6911      	ldr	r1, [r2, #16]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	000186a0 	.word	0x000186a0
 8002a20:	001e847f 	.word	0x001e847f
 8002a24:	003d08ff 	.word	0x003d08ff
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	10624dd3 	.word	0x10624dd3

08002a30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	4608      	mov	r0, r1
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	817b      	strh	r3, [r7, #10]
 8002a42:	460b      	mov	r3, r1
 8002a44:	813b      	strh	r3, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a4a:	f7ff f8db 	bl	8001c04 <HAL_GetTick>
 8002a4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	f040 80d9 	bne.w	8002c10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2319      	movs	r3, #25
 8002a64:	2201      	movs	r2, #1
 8002a66:	496d      	ldr	r1, [pc, #436]	; (8002c1c <HAL_I2C_Mem_Write+0x1ec>)
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fa9d 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
 8002a76:	e0cc      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2C_Mem_Write+0x56>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e0c5      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d007      	beq.n	8002aac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2221      	movs	r2, #33	; 0x21
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2240      	movs	r2, #64	; 0x40
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a3a      	ldr	r2, [r7, #32]
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a4d      	ldr	r2, [pc, #308]	; (8002c20 <HAL_I2C_Mem_Write+0x1f0>)
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aee:	88f8      	ldrh	r0, [r7, #6]
 8002af0:	893a      	ldrh	r2, [r7, #8]
 8002af2:	8979      	ldrh	r1, [r7, #10]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4603      	mov	r3, r0
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f9be 	bl	8002e80 <I2C_RequestMemoryWrite>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d052      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e081      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fb1e 	bl	8003154 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d107      	bne.n	8002b36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06b      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d11b      	bne.n	8002bb0 <HAL_I2C_Mem_Write+0x180>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d017      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1aa      	bne.n	8002b0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fb0a 	bl	80031d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e016      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	00100002 	.word	0x00100002
 8002c20:	ffff0000 	.word	0xffff0000

08002c24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	460b      	mov	r3, r1
 8002c32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7fe ffe6 	bl	8001c04 <HAL_GetTick>
 8002c38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	f040 8110 	bne.w	8002e6c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2319      	movs	r3, #25
 8002c52:	2201      	movs	r2, #1
 8002c54:	4988      	ldr	r1, [pc, #544]	; (8002e78 <HAL_I2C_IsDeviceReady+0x254>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f9a6 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	e103      	b.n	8002e6e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2C_IsDeviceReady+0x50>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0fc      	b.n	8002e6e <HAL_I2C_IsDeviceReady+0x24a>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d007      	beq.n	8002c9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2224      	movs	r2, #36	; 0x24
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a70      	ldr	r2, [pc, #448]	; (8002e7c <HAL_I2C_IsDeviceReady+0x258>)
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f964 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0b6      	b.n	8002e6e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d00:	897b      	ldrh	r3, [r7, #10]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d0e:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d10:	f7fe ff78 	bl	8001c04 <HAL_GetTick>
 8002d14:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d44:	e025      	b.n	8002d92 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe ff5d 	bl	8001c04 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <HAL_I2C_IsDeviceReady+0x138>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	22a0      	movs	r2, #160	; 0xa0
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d9c:	d005      	beq.n	8002daa <HAL_I2C_IsDeviceReady+0x186>
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <HAL_I2C_IsDeviceReady+0x186>
 8002da4:	7dbb      	ldrb	r3, [r7, #22]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0cd      	beq.n	8002d46 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d129      	bne.n	8002e14 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2319      	movs	r3, #25
 8002dec:	2201      	movs	r2, #1
 8002dee:	4922      	ldr	r1, [pc, #136]	; (8002e78 <HAL_I2C_IsDeviceReady+0x254>)
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f8d9 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e036      	b.n	8002e6e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e02c      	b.n	8002e6e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e22:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e2c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2319      	movs	r3, #25
 8002e34:	2201      	movs	r2, #1
 8002e36:	4910      	ldr	r1, [pc, #64]	; (8002e78 <HAL_I2C_IsDeviceReady+0x254>)
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f8b5 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e012      	b.n	8002e6e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	f4ff af33 	bcc.w	8002cbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	00100002 	.word	0x00100002
 8002e7c:	ffff0000 	.word	0xffff0000

08002e80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	817b      	strh	r3, [r7, #10]
 8002e92:	460b      	mov	r3, r1
 8002e94:	813b      	strh	r3, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f876 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e05f      	b.n	8002f9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002edc:	897b      	ldrh	r3, [r7, #10]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	6a3a      	ldr	r2, [r7, #32]
 8002ef0:	492c      	ldr	r1, [pc, #176]	; (8002fa4 <I2C_RequestMemoryWrite+0x124>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f8af 	bl	8003056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e04c      	b.n	8002f9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	6a39      	ldr	r1, [r7, #32]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f919 	bl	8003154 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d107      	bne.n	8002f40 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e02b      	b.n	8002f9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f4a:	893b      	ldrh	r3, [r7, #8]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]
 8002f54:	e021      	b.n	8002f9a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f56:	893b      	ldrh	r3, [r7, #8]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f66:	6a39      	ldr	r1, [r7, #32]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f8f3 	bl	8003154 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d107      	bne.n	8002f8c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e005      	b.n	8002f9c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f90:	893b      	ldrh	r3, [r7, #8]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	00010002 	.word	0x00010002

08002fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb8:	e025      	b.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d021      	beq.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7fe fe1f 	bl	8001c04 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d116      	bne.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0220 	orr.w	r2, r3, #32
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e023      	b.n	800304e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10d      	bne.n	800302c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	e00c      	b.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4013      	ands	r3, r2
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	429a      	cmp	r2, r3
 800304a:	d0b6      	beq.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003064:	e051      	b.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003074:	d123      	bne.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003084:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800308e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f043 0204 	orr.w	r2, r3, #4
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e046      	b.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d021      	beq.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fe fd9d 	bl	8001c04 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d116      	bne.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e020      	b.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10c      	bne.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4013      	ands	r3, r2
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e00b      	b.n	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	43da      	mvns	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4013      	ands	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d18d      	bne.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003160:	e02d      	b.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f878 	bl	8003258 <I2C_IsAcknowledgeFailed>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e02d      	b.n	80031ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d021      	beq.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fe fd43 	bl	8001c04 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d116      	bne.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e007      	b.n	80031ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c8:	2b80      	cmp	r3, #128	; 0x80
 80031ca:	d1ca      	bne.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e2:	e02d      	b.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f837 	bl	8003258 <I2C_IsAcknowledgeFailed>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e02d      	b.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d021      	beq.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fc:	f7fe fd02 	bl	8001c04 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d1ca      	bne.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326e:	d11b      	bne.n	80032a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0204 	orr.w	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e25b      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d075      	beq.n	80033c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032d6:	4ba3      	ldr	r3, [pc, #652]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d00c      	beq.n	80032fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4ba0      	ldr	r3, [pc, #640]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d112      	bne.n	8003314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ee:	4b9d      	ldr	r3, [pc, #628]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fa:	d10b      	bne.n	8003314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fc:	4b99      	ldr	r3, [pc, #612]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d05b      	beq.n	80033c0 <HAL_RCC_OscConfig+0x108>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d157      	bne.n	80033c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e236      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331c:	d106      	bne.n	800332c <HAL_RCC_OscConfig+0x74>
 800331e:	4b91      	ldr	r3, [pc, #580]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a90      	ldr	r2, [pc, #576]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e01d      	b.n	8003368 <HAL_RCC_OscConfig+0xb0>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x98>
 8003336:	4b8b      	ldr	r3, [pc, #556]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a8a      	ldr	r2, [pc, #552]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b88      	ldr	r3, [pc, #544]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a87      	ldr	r2, [pc, #540]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0xb0>
 8003350:	4b84      	ldr	r3, [pc, #528]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a83      	ldr	r2, [pc, #524]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b81      	ldr	r3, [pc, #516]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a80      	ldr	r2, [pc, #512]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fe fc48 	bl	8001c04 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fc44 	bl	8001c04 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1fb      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	4b76      	ldr	r3, [pc, #472]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0xc0>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fc34 	bl	8001c04 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fe fc30 	bl	8001c04 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e1e7      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	4b6c      	ldr	r3, [pc, #432]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0xe8>
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d063      	beq.n	8003496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ce:	4b65      	ldr	r3, [pc, #404]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033da:	4b62      	ldr	r3, [pc, #392]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d11c      	bne.n	8003420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b5f      	ldr	r3, [pc, #380]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d116      	bne.n	8003420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	4b5c      	ldr	r3, [pc, #368]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_RCC_OscConfig+0x152>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e1bb      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340a:	4b56      	ldr	r3, [pc, #344]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4952      	ldr	r1, [pc, #328]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	e03a      	b.n	8003496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003428:	4b4f      	ldr	r3, [pc, #316]	; (8003568 <HAL_RCC_OscConfig+0x2b0>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fe fbe9 	bl	8001c04 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003436:	f7fe fbe5 	bl	8001c04 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e19c      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003448:	4b46      	ldr	r3, [pc, #280]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	4b43      	ldr	r3, [pc, #268]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4940      	ldr	r1, [pc, #256]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
 8003468:	e015      	b.n	8003496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346a:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <HAL_RCC_OscConfig+0x2b0>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fbc8 	bl	8001c04 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003478:	f7fe fbc4 	bl	8001c04 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e17b      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	4b36      	ldr	r3, [pc, #216]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d030      	beq.n	8003504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d016      	beq.n	80034d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034aa:	4b30      	ldr	r3, [pc, #192]	; (800356c <HAL_RCC_OscConfig+0x2b4>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fe fba8 	bl	8001c04 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b8:	f7fe fba4 	bl	8001c04 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e15b      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ca:	4b26      	ldr	r3, [pc, #152]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x200>
 80034d6:	e015      	b.n	8003504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d8:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_OscConfig+0x2b4>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034de:	f7fe fb91 	bl	8001c04 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e6:	f7fe fb8d 	bl	8001c04 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e144      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 80034fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a0 	beq.w	8003652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x2b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d121      	bne.n	8003592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_RCC_OscConfig+0x2b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a07      	ldr	r2, [pc, #28]	; (8003570 <HAL_RCC_OscConfig+0x2b8>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fe fb53 	bl	8001c04 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e011      	b.n	8003586 <HAL_RCC_OscConfig+0x2ce>
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	42470000 	.word	0x42470000
 800356c:	42470e80 	.word	0x42470e80
 8003570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003574:	f7fe fb46 	bl	8001c04 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0fd      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003586:	4b81      	ldr	r3, [pc, #516]	; (800378c <HAL_RCC_OscConfig+0x4d4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2f0>
 800359a:	4b7d      	ldr	r3, [pc, #500]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a7c      	ldr	r2, [pc, #496]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	e01c      	b.n	80035e2 <HAL_RCC_OscConfig+0x32a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	d10c      	bne.n	80035ca <HAL_RCC_OscConfig+0x312>
 80035b0:	4b77      	ldr	r3, [pc, #476]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4a76      	ldr	r2, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80035b6:	f043 0304 	orr.w	r3, r3, #4
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
 80035bc:	4b74      	ldr	r3, [pc, #464]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	4a73      	ldr	r2, [pc, #460]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6713      	str	r3, [r2, #112]	; 0x70
 80035c8:	e00b      	b.n	80035e2 <HAL_RCC_OscConfig+0x32a>
 80035ca:	4b71      	ldr	r3, [pc, #452]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	4a70      	ldr	r2, [pc, #448]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6713      	str	r3, [r2, #112]	; 0x70
 80035d6:	4b6e      	ldr	r3, [pc, #440]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a6d      	ldr	r2, [pc, #436]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80035dc:	f023 0304 	bic.w	r3, r3, #4
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d015      	beq.n	8003616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ea:	f7fe fb0b 	bl	8001c04 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fe fb07 	bl	8001c04 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0bc      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	4b61      	ldr	r3, [pc, #388]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ee      	beq.n	80035f2 <HAL_RCC_OscConfig+0x33a>
 8003614:	e014      	b.n	8003640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fe faf5 	bl	8001c04 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fe faf1 	bl	8001c04 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0a6      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	4b56      	ldr	r3, [pc, #344]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ee      	bne.n	800361e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d105      	bne.n	8003652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003646:	4b52      	ldr	r3, [pc, #328]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4a51      	ldr	r2, [pc, #324]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 800364c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8092 	beq.w	8003780 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365c:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b08      	cmp	r3, #8
 8003666:	d05c      	beq.n	8003722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d141      	bne.n	80036f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003670:	4b48      	ldr	r3, [pc, #288]	; (8003794 <HAL_RCC_OscConfig+0x4dc>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fe fac5 	bl	8001c04 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367e:	f7fe fac1 	bl	8001c04 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e078      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003690:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	019b      	lsls	r3, r3, #6
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	3b01      	subs	r3, #1
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	061b      	lsls	r3, r3, #24
 80036c0:	4933      	ldr	r1, [pc, #204]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c6:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_RCC_OscConfig+0x4dc>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fe fa9a 	bl	8001c04 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe fa96 	bl	8001c04 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e04d      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x41c>
 80036f2:	e045      	b.n	8003780 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f4:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x4dc>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe fa83 	bl	8001c04 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003702:	f7fe fa7f 	bl	8001c04 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e036      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x44a>
 8003720:	e02e      	b.n	8003780 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e029      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800372e:	4b18      	ldr	r3, [pc, #96]	; (8003790 <HAL_RCC_OscConfig+0x4d8>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	429a      	cmp	r2, r3
 8003740:	d11c      	bne.n	800377c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d115      	bne.n	800377c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003756:	4013      	ands	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800375c:	4293      	cmp	r3, r2
 800375e:	d10d      	bne.n	800377c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d106      	bne.n	800377c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40007000 	.word	0x40007000
 8003790:	40023800 	.word	0x40023800
 8003794:	42470060 	.word	0x42470060

08003798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0cc      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4b68      	ldr	r3, [pc, #416]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d90c      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b63      	ldr	r3, [pc, #396]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0b8      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ec:	4b59      	ldr	r3, [pc, #356]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a58      	ldr	r2, [pc, #352]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003804:	4b53      	ldr	r3, [pc, #332]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a52      	ldr	r2, [pc, #328]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800380e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	494d      	ldr	r1, [pc, #308]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d044      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d119      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e07f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d003      	beq.n	8003856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003852:	2b03      	cmp	r3, #3
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003866:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e067      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003876:	4b37      	ldr	r3, [pc, #220]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4934      	ldr	r1, [pc, #208]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003888:	f7fe f9bc 	bl	8001c04 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7fe f9b8 	bl	8001c04 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e04f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 020c 	and.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1eb      	bne.n	8003890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d20c      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e032      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4916      	ldr	r1, [pc, #88]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	490e      	ldr	r1, [pc, #56]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800391e:	f000 f821 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003922:	4601      	mov	r1, r0
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	5cd3      	ldrb	r3, [r2, r3]
 8003932:	fa21 f303 	lsr.w	r3, r1, r3
 8003936:	4a09      	ldr	r2, [pc, #36]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe f91c 	bl	8001b7c <HAL_InitTick>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023c00 	.word	0x40023c00
 8003954:	40023800 	.word	0x40023800
 8003958:	08005f28 	.word	0x08005f28
 800395c:	20000008 	.word	0x20000008
 8003960:	2000000c 	.word	0x2000000c

08003964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	2300      	movs	r3, #0
 8003974:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800397a:	4b63      	ldr	r3, [pc, #396]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d007      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x32>
 8003986:	2b08      	cmp	r3, #8
 8003988:	d008      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x38>
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 80b4 	bne.w	8003af8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003992:	60bb      	str	r3, [r7, #8]
       break;
 8003994:	e0b3      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003996:	4b5e      	ldr	r3, [pc, #376]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003998:	60bb      	str	r3, [r7, #8]
      break;
 800399a:	e0b0      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800399c:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a6:	4b58      	ldr	r3, [pc, #352]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d04a      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b2:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	f04f 0400 	mov.w	r4, #0
 80039bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	ea03 0501 	and.w	r5, r3, r1
 80039c8:	ea04 0602 	and.w	r6, r4, r2
 80039cc:	4629      	mov	r1, r5
 80039ce:	4632      	mov	r2, r6
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	f04f 0400 	mov.w	r4, #0
 80039d8:	0154      	lsls	r4, r2, #5
 80039da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039de:	014b      	lsls	r3, r1, #5
 80039e0:	4619      	mov	r1, r3
 80039e2:	4622      	mov	r2, r4
 80039e4:	1b49      	subs	r1, r1, r5
 80039e6:	eb62 0206 	sbc.w	r2, r2, r6
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	f04f 0400 	mov.w	r4, #0
 80039f2:	0194      	lsls	r4, r2, #6
 80039f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039f8:	018b      	lsls	r3, r1, #6
 80039fa:	1a5b      	subs	r3, r3, r1
 80039fc:	eb64 0402 	sbc.w	r4, r4, r2
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	00e2      	lsls	r2, r4, #3
 8003a0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a0e:	00d9      	lsls	r1, r3, #3
 8003a10:	460b      	mov	r3, r1
 8003a12:	4614      	mov	r4, r2
 8003a14:	195b      	adds	r3, r3, r5
 8003a16:	eb44 0406 	adc.w	r4, r4, r6
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	0262      	lsls	r2, r4, #9
 8003a24:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a28:	0259      	lsls	r1, r3, #9
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	4621      	mov	r1, r4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f04f 0400 	mov.w	r4, #0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	f7fc fdfc 	bl	8000638 <__aeabi_uldivmod>
 8003a40:	4603      	mov	r3, r0
 8003a42:	460c      	mov	r4, r1
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e049      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a48:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	f04f 0400 	mov.w	r4, #0
 8003a52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	ea03 0501 	and.w	r5, r3, r1
 8003a5e:	ea04 0602 	and.w	r6, r4, r2
 8003a62:	4629      	mov	r1, r5
 8003a64:	4632      	mov	r2, r6
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	f04f 0400 	mov.w	r4, #0
 8003a6e:	0154      	lsls	r4, r2, #5
 8003a70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a74:	014b      	lsls	r3, r1, #5
 8003a76:	4619      	mov	r1, r3
 8003a78:	4622      	mov	r2, r4
 8003a7a:	1b49      	subs	r1, r1, r5
 8003a7c:	eb62 0206 	sbc.w	r2, r2, r6
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	f04f 0400 	mov.w	r4, #0
 8003a88:	0194      	lsls	r4, r2, #6
 8003a8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a8e:	018b      	lsls	r3, r1, #6
 8003a90:	1a5b      	subs	r3, r3, r1
 8003a92:	eb64 0402 	sbc.w	r4, r4, r2
 8003a96:	f04f 0100 	mov.w	r1, #0
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	00e2      	lsls	r2, r4, #3
 8003aa0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003aa4:	00d9      	lsls	r1, r3, #3
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	195b      	adds	r3, r3, r5
 8003aac:	eb44 0406 	adc.w	r4, r4, r6
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	02a2      	lsls	r2, r4, #10
 8003aba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003abe:	0299      	lsls	r1, r3, #10
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4614      	mov	r4, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f04f 0400 	mov.w	r4, #0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	f7fc fdb1 	bl	8000638 <__aeabi_uldivmod>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	60bb      	str	r3, [r7, #8]
      break;
 8003af6:	e002      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003afa:	60bb      	str	r3, [r7, #8]
      break;
 8003afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afe:	68bb      	ldr	r3, [r7, #8]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	007a1200 	.word	0x007a1200

08003b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000008 	.word	0x20000008

08003b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b30:	f7ff fff0 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b34:	4601      	mov	r1, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4a03      	ldr	r2, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08005f38 	.word	0x08005f38

08003b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b58:	f7ff ffdc 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b5c:	4601      	mov	r1, r0
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	0b5b      	lsrs	r3, r3, #13
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4a03      	ldr	r2, [pc, #12]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40023800 	.word	0x40023800
 8003b78:	08005f38 	.word	0x08005f38

08003b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e03f      	b.n	8003c0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd fee6 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f829 	bl	8003c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c5a:	f023 030c 	bic.w	r3, r3, #12
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c86:	f040 818b 	bne.w	8003fa0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4ac1      	ldr	r2, [pc, #772]	; (8003f94 <UART_SetConfig+0x37c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d005      	beq.n	8003ca0 <UART_SetConfig+0x88>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4abf      	ldr	r2, [pc, #764]	; (8003f98 <UART_SetConfig+0x380>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	f040 80bd 	bne.w	8003e1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ca0:	f7ff ff58 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 8003ca4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	461d      	mov	r5, r3
 8003caa:	f04f 0600 	mov.w	r6, #0
 8003cae:	46a8      	mov	r8, r5
 8003cb0:	46b1      	mov	r9, r6
 8003cb2:	eb18 0308 	adds.w	r3, r8, r8
 8003cb6:	eb49 0409 	adc.w	r4, r9, r9
 8003cba:	4698      	mov	r8, r3
 8003cbc:	46a1      	mov	r9, r4
 8003cbe:	eb18 0805 	adds.w	r8, r8, r5
 8003cc2:	eb49 0906 	adc.w	r9, r9, r6
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cda:	4688      	mov	r8, r1
 8003cdc:	4691      	mov	r9, r2
 8003cde:	eb18 0005 	adds.w	r0, r8, r5
 8003ce2:	eb49 0106 	adc.w	r1, r9, r6
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	461d      	mov	r5, r3
 8003cec:	f04f 0600 	mov.w	r6, #0
 8003cf0:	196b      	adds	r3, r5, r5
 8003cf2:	eb46 0406 	adc.w	r4, r6, r6
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	f7fc fc9d 	bl	8000638 <__aeabi_uldivmod>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	461a      	mov	r2, r3
 8003d04:	4ba5      	ldr	r3, [pc, #660]	; (8003f9c <UART_SetConfig+0x384>)
 8003d06:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	461d      	mov	r5, r3
 8003d14:	f04f 0600 	mov.w	r6, #0
 8003d18:	46a9      	mov	r9, r5
 8003d1a:	46b2      	mov	sl, r6
 8003d1c:	eb19 0309 	adds.w	r3, r9, r9
 8003d20:	eb4a 040a 	adc.w	r4, sl, sl
 8003d24:	4699      	mov	r9, r3
 8003d26:	46a2      	mov	sl, r4
 8003d28:	eb19 0905 	adds.w	r9, r9, r5
 8003d2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d30:	f04f 0100 	mov.w	r1, #0
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d44:	4689      	mov	r9, r1
 8003d46:	4692      	mov	sl, r2
 8003d48:	eb19 0005 	adds.w	r0, r9, r5
 8003d4c:	eb4a 0106 	adc.w	r1, sl, r6
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	461d      	mov	r5, r3
 8003d56:	f04f 0600 	mov.w	r6, #0
 8003d5a:	196b      	adds	r3, r5, r5
 8003d5c:	eb46 0406 	adc.w	r4, r6, r6
 8003d60:	461a      	mov	r2, r3
 8003d62:	4623      	mov	r3, r4
 8003d64:	f7fc fc68 	bl	8000638 <__aeabi_uldivmod>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b8b      	ldr	r3, [pc, #556]	; (8003f9c <UART_SetConfig+0x384>)
 8003d70:	fba3 1302 	umull	r1, r3, r3, r2
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	2164      	movs	r1, #100	; 0x64
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	3332      	adds	r3, #50	; 0x32
 8003d82:	4a86      	ldr	r2, [pc, #536]	; (8003f9c <UART_SetConfig+0x384>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d90:	4498      	add	r8, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	461d      	mov	r5, r3
 8003d96:	f04f 0600 	mov.w	r6, #0
 8003d9a:	46a9      	mov	r9, r5
 8003d9c:	46b2      	mov	sl, r6
 8003d9e:	eb19 0309 	adds.w	r3, r9, r9
 8003da2:	eb4a 040a 	adc.w	r4, sl, sl
 8003da6:	4699      	mov	r9, r3
 8003da8:	46a2      	mov	sl, r4
 8003daa:	eb19 0905 	adds.w	r9, r9, r5
 8003dae:	eb4a 0a06 	adc.w	sl, sl, r6
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dc6:	4689      	mov	r9, r1
 8003dc8:	4692      	mov	sl, r2
 8003dca:	eb19 0005 	adds.w	r0, r9, r5
 8003dce:	eb4a 0106 	adc.w	r1, sl, r6
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	461d      	mov	r5, r3
 8003dd8:	f04f 0600 	mov.w	r6, #0
 8003ddc:	196b      	adds	r3, r5, r5
 8003dde:	eb46 0406 	adc.w	r4, r6, r6
 8003de2:	461a      	mov	r2, r3
 8003de4:	4623      	mov	r3, r4
 8003de6:	f7fc fc27 	bl	8000638 <__aeabi_uldivmod>
 8003dea:	4603      	mov	r3, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <UART_SetConfig+0x384>)
 8003df2:	fba3 1302 	umull	r1, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2164      	movs	r1, #100	; 0x64
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	3332      	adds	r3, #50	; 0x32
 8003e04:	4a65      	ldr	r2, [pc, #404]	; (8003f9c <UART_SetConfig+0x384>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	f003 0207 	and.w	r2, r3, #7
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4442      	add	r2, r8
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	e26f      	b.n	80042fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e1a:	f7ff fe87 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 8003e1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	461d      	mov	r5, r3
 8003e24:	f04f 0600 	mov.w	r6, #0
 8003e28:	46a8      	mov	r8, r5
 8003e2a:	46b1      	mov	r9, r6
 8003e2c:	eb18 0308 	adds.w	r3, r8, r8
 8003e30:	eb49 0409 	adc.w	r4, r9, r9
 8003e34:	4698      	mov	r8, r3
 8003e36:	46a1      	mov	r9, r4
 8003e38:	eb18 0805 	adds.w	r8, r8, r5
 8003e3c:	eb49 0906 	adc.w	r9, r9, r6
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e54:	4688      	mov	r8, r1
 8003e56:	4691      	mov	r9, r2
 8003e58:	eb18 0005 	adds.w	r0, r8, r5
 8003e5c:	eb49 0106 	adc.w	r1, r9, r6
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	461d      	mov	r5, r3
 8003e66:	f04f 0600 	mov.w	r6, #0
 8003e6a:	196b      	adds	r3, r5, r5
 8003e6c:	eb46 0406 	adc.w	r4, r6, r6
 8003e70:	461a      	mov	r2, r3
 8003e72:	4623      	mov	r3, r4
 8003e74:	f7fc fbe0 	bl	8000638 <__aeabi_uldivmod>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <UART_SetConfig+0x384>)
 8003e80:	fba3 2302 	umull	r2, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	461d      	mov	r5, r3
 8003e8e:	f04f 0600 	mov.w	r6, #0
 8003e92:	46a9      	mov	r9, r5
 8003e94:	46b2      	mov	sl, r6
 8003e96:	eb19 0309 	adds.w	r3, r9, r9
 8003e9a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e9e:	4699      	mov	r9, r3
 8003ea0:	46a2      	mov	sl, r4
 8003ea2:	eb19 0905 	adds.w	r9, r9, r5
 8003ea6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ebe:	4689      	mov	r9, r1
 8003ec0:	4692      	mov	sl, r2
 8003ec2:	eb19 0005 	adds.w	r0, r9, r5
 8003ec6:	eb4a 0106 	adc.w	r1, sl, r6
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	461d      	mov	r5, r3
 8003ed0:	f04f 0600 	mov.w	r6, #0
 8003ed4:	196b      	adds	r3, r5, r5
 8003ed6:	eb46 0406 	adc.w	r4, r6, r6
 8003eda:	461a      	mov	r2, r3
 8003edc:	4623      	mov	r3, r4
 8003ede:	f7fc fbab 	bl	8000638 <__aeabi_uldivmod>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <UART_SetConfig+0x384>)
 8003eea:	fba3 1302 	umull	r1, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2164      	movs	r1, #100	; 0x64
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	3332      	adds	r3, #50	; 0x32
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <UART_SetConfig+0x384>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f0a:	4498      	add	r8, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	461d      	mov	r5, r3
 8003f10:	f04f 0600 	mov.w	r6, #0
 8003f14:	46a9      	mov	r9, r5
 8003f16:	46b2      	mov	sl, r6
 8003f18:	eb19 0309 	adds.w	r3, r9, r9
 8003f1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f20:	4699      	mov	r9, r3
 8003f22:	46a2      	mov	sl, r4
 8003f24:	eb19 0905 	adds.w	r9, r9, r5
 8003f28:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f40:	4689      	mov	r9, r1
 8003f42:	4692      	mov	sl, r2
 8003f44:	eb19 0005 	adds.w	r0, r9, r5
 8003f48:	eb4a 0106 	adc.w	r1, sl, r6
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	461d      	mov	r5, r3
 8003f52:	f04f 0600 	mov.w	r6, #0
 8003f56:	196b      	adds	r3, r5, r5
 8003f58:	eb46 0406 	adc.w	r4, r6, r6
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4623      	mov	r3, r4
 8003f60:	f7fc fb6a 	bl	8000638 <__aeabi_uldivmod>
 8003f64:	4603      	mov	r3, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <UART_SetConfig+0x384>)
 8003f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	2164      	movs	r1, #100	; 0x64
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	3332      	adds	r3, #50	; 0x32
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <UART_SetConfig+0x384>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	f003 0207 	and.w	r2, r3, #7
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4442      	add	r2, r8
 8003f90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f92:	e1b2      	b.n	80042fa <UART_SetConfig+0x6e2>
 8003f94:	40011000 	.word	0x40011000
 8003f98:	40011400 	.word	0x40011400
 8003f9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4ad7      	ldr	r2, [pc, #860]	; (8004304 <UART_SetConfig+0x6ec>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d005      	beq.n	8003fb6 <UART_SetConfig+0x39e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4ad6      	ldr	r2, [pc, #856]	; (8004308 <UART_SetConfig+0x6f0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	f040 80d1 	bne.w	8004158 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fb6:	f7ff fdcd 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 8003fba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	469a      	mov	sl, r3
 8003fc0:	f04f 0b00 	mov.w	fp, #0
 8003fc4:	46d0      	mov	r8, sl
 8003fc6:	46d9      	mov	r9, fp
 8003fc8:	eb18 0308 	adds.w	r3, r8, r8
 8003fcc:	eb49 0409 	adc.w	r4, r9, r9
 8003fd0:	4698      	mov	r8, r3
 8003fd2:	46a1      	mov	r9, r4
 8003fd4:	eb18 080a 	adds.w	r8, r8, sl
 8003fd8:	eb49 090b 	adc.w	r9, r9, fp
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fe8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ff0:	4688      	mov	r8, r1
 8003ff2:	4691      	mov	r9, r2
 8003ff4:	eb1a 0508 	adds.w	r5, sl, r8
 8003ff8:	eb4b 0609 	adc.w	r6, fp, r9
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4619      	mov	r1, r3
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	f04f 0400 	mov.w	r4, #0
 800400e:	0094      	lsls	r4, r2, #2
 8004010:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004014:	008b      	lsls	r3, r1, #2
 8004016:	461a      	mov	r2, r3
 8004018:	4623      	mov	r3, r4
 800401a:	4628      	mov	r0, r5
 800401c:	4631      	mov	r1, r6
 800401e:	f7fc fb0b 	bl	8000638 <__aeabi_uldivmod>
 8004022:	4603      	mov	r3, r0
 8004024:	460c      	mov	r4, r1
 8004026:	461a      	mov	r2, r3
 8004028:	4bb8      	ldr	r3, [pc, #736]	; (800430c <UART_SetConfig+0x6f4>)
 800402a:	fba3 2302 	umull	r2, r3, r3, r2
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	469b      	mov	fp, r3
 8004038:	f04f 0c00 	mov.w	ip, #0
 800403c:	46d9      	mov	r9, fp
 800403e:	46e2      	mov	sl, ip
 8004040:	eb19 0309 	adds.w	r3, r9, r9
 8004044:	eb4a 040a 	adc.w	r4, sl, sl
 8004048:	4699      	mov	r9, r3
 800404a:	46a2      	mov	sl, r4
 800404c:	eb19 090b 	adds.w	r9, r9, fp
 8004050:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004054:	f04f 0100 	mov.w	r1, #0
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004060:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004064:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004068:	4689      	mov	r9, r1
 800406a:	4692      	mov	sl, r2
 800406c:	eb1b 0509 	adds.w	r5, fp, r9
 8004070:	eb4c 060a 	adc.w	r6, ip, sl
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4619      	mov	r1, r3
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	f04f 0400 	mov.w	r4, #0
 8004086:	0094      	lsls	r4, r2, #2
 8004088:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800408c:	008b      	lsls	r3, r1, #2
 800408e:	461a      	mov	r2, r3
 8004090:	4623      	mov	r3, r4
 8004092:	4628      	mov	r0, r5
 8004094:	4631      	mov	r1, r6
 8004096:	f7fc facf 	bl	8000638 <__aeabi_uldivmod>
 800409a:	4603      	mov	r3, r0
 800409c:	460c      	mov	r4, r1
 800409e:	461a      	mov	r2, r3
 80040a0:	4b9a      	ldr	r3, [pc, #616]	; (800430c <UART_SetConfig+0x6f4>)
 80040a2:	fba3 1302 	umull	r1, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2164      	movs	r1, #100	; 0x64
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a95      	ldr	r2, [pc, #596]	; (800430c <UART_SetConfig+0x6f4>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c0:	4498      	add	r8, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	469b      	mov	fp, r3
 80040c6:	f04f 0c00 	mov.w	ip, #0
 80040ca:	46d9      	mov	r9, fp
 80040cc:	46e2      	mov	sl, ip
 80040ce:	eb19 0309 	adds.w	r3, r9, r9
 80040d2:	eb4a 040a 	adc.w	r4, sl, sl
 80040d6:	4699      	mov	r9, r3
 80040d8:	46a2      	mov	sl, r4
 80040da:	eb19 090b 	adds.w	r9, r9, fp
 80040de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f6:	4689      	mov	r9, r1
 80040f8:	4692      	mov	sl, r2
 80040fa:	eb1b 0509 	adds.w	r5, fp, r9
 80040fe:	eb4c 060a 	adc.w	r6, ip, sl
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4619      	mov	r1, r3
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	f04f 0400 	mov.w	r4, #0
 8004114:	0094      	lsls	r4, r2, #2
 8004116:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800411a:	008b      	lsls	r3, r1, #2
 800411c:	461a      	mov	r2, r3
 800411e:	4623      	mov	r3, r4
 8004120:	4628      	mov	r0, r5
 8004122:	4631      	mov	r1, r6
 8004124:	f7fc fa88 	bl	8000638 <__aeabi_uldivmod>
 8004128:	4603      	mov	r3, r0
 800412a:	460c      	mov	r4, r1
 800412c:	461a      	mov	r2, r3
 800412e:	4b77      	ldr	r3, [pc, #476]	; (800430c <UART_SetConfig+0x6f4>)
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2164      	movs	r1, #100	; 0x64
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	3332      	adds	r3, #50	; 0x32
 8004142:	4a72      	ldr	r2, [pc, #456]	; (800430c <UART_SetConfig+0x6f4>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4442      	add	r2, r8
 8004154:	609a      	str	r2, [r3, #8]
 8004156:	e0d0      	b.n	80042fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004158:	f7ff fce8 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 800415c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	469a      	mov	sl, r3
 8004162:	f04f 0b00 	mov.w	fp, #0
 8004166:	46d0      	mov	r8, sl
 8004168:	46d9      	mov	r9, fp
 800416a:	eb18 0308 	adds.w	r3, r8, r8
 800416e:	eb49 0409 	adc.w	r4, r9, r9
 8004172:	4698      	mov	r8, r3
 8004174:	46a1      	mov	r9, r4
 8004176:	eb18 080a 	adds.w	r8, r8, sl
 800417a:	eb49 090b 	adc.w	r9, r9, fp
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800418a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800418e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004192:	4688      	mov	r8, r1
 8004194:	4691      	mov	r9, r2
 8004196:	eb1a 0508 	adds.w	r5, sl, r8
 800419a:	eb4b 0609 	adc.w	r6, fp, r9
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4619      	mov	r1, r3
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	f04f 0400 	mov.w	r4, #0
 80041b0:	0094      	lsls	r4, r2, #2
 80041b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041b6:	008b      	lsls	r3, r1, #2
 80041b8:	461a      	mov	r2, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	4631      	mov	r1, r6
 80041c0:	f7fc fa3a 	bl	8000638 <__aeabi_uldivmod>
 80041c4:	4603      	mov	r3, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b50      	ldr	r3, [pc, #320]	; (800430c <UART_SetConfig+0x6f4>)
 80041cc:	fba3 2302 	umull	r2, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	469b      	mov	fp, r3
 80041da:	f04f 0c00 	mov.w	ip, #0
 80041de:	46d9      	mov	r9, fp
 80041e0:	46e2      	mov	sl, ip
 80041e2:	eb19 0309 	adds.w	r3, r9, r9
 80041e6:	eb4a 040a 	adc.w	r4, sl, sl
 80041ea:	4699      	mov	r9, r3
 80041ec:	46a2      	mov	sl, r4
 80041ee:	eb19 090b 	adds.w	r9, r9, fp
 80041f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004202:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004206:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800420a:	4689      	mov	r9, r1
 800420c:	4692      	mov	sl, r2
 800420e:	eb1b 0509 	adds.w	r5, fp, r9
 8004212:	eb4c 060a 	adc.w	r6, ip, sl
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4619      	mov	r1, r3
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	f04f 0400 	mov.w	r4, #0
 8004228:	0094      	lsls	r4, r2, #2
 800422a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800422e:	008b      	lsls	r3, r1, #2
 8004230:	461a      	mov	r2, r3
 8004232:	4623      	mov	r3, r4
 8004234:	4628      	mov	r0, r5
 8004236:	4631      	mov	r1, r6
 8004238:	f7fc f9fe 	bl	8000638 <__aeabi_uldivmod>
 800423c:	4603      	mov	r3, r0
 800423e:	460c      	mov	r4, r1
 8004240:	461a      	mov	r2, r3
 8004242:	4b32      	ldr	r3, [pc, #200]	; (800430c <UART_SetConfig+0x6f4>)
 8004244:	fba3 1302 	umull	r1, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	2164      	movs	r1, #100	; 0x64
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	3332      	adds	r3, #50	; 0x32
 8004256:	4a2d      	ldr	r2, [pc, #180]	; (800430c <UART_SetConfig+0x6f4>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004262:	4498      	add	r8, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	469b      	mov	fp, r3
 8004268:	f04f 0c00 	mov.w	ip, #0
 800426c:	46d9      	mov	r9, fp
 800426e:	46e2      	mov	sl, ip
 8004270:	eb19 0309 	adds.w	r3, r9, r9
 8004274:	eb4a 040a 	adc.w	r4, sl, sl
 8004278:	4699      	mov	r9, r3
 800427a:	46a2      	mov	sl, r4
 800427c:	eb19 090b 	adds.w	r9, r9, fp
 8004280:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004290:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004294:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004298:	4689      	mov	r9, r1
 800429a:	4692      	mov	sl, r2
 800429c:	eb1b 0509 	adds.w	r5, fp, r9
 80042a0:	eb4c 060a 	adc.w	r6, ip, sl
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4619      	mov	r1, r3
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	f04f 0400 	mov.w	r4, #0
 80042b6:	0094      	lsls	r4, r2, #2
 80042b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042bc:	008b      	lsls	r3, r1, #2
 80042be:	461a      	mov	r2, r3
 80042c0:	4623      	mov	r3, r4
 80042c2:	4628      	mov	r0, r5
 80042c4:	4631      	mov	r1, r6
 80042c6:	f7fc f9b7 	bl	8000638 <__aeabi_uldivmod>
 80042ca:	4603      	mov	r3, r0
 80042cc:	460c      	mov	r4, r1
 80042ce:	461a      	mov	r2, r3
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <UART_SetConfig+0x6f4>)
 80042d2:	fba3 1302 	umull	r1, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2164      	movs	r1, #100	; 0x64
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	3332      	adds	r3, #50	; 0x32
 80042e4:	4a09      	ldr	r2, [pc, #36]	; (800430c <UART_SetConfig+0x6f4>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4442      	add	r2, r8
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	e7ff      	b.n	80042fa <UART_SetConfig+0x6e2>
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004304:	40011000 	.word	0x40011000
 8004308:	40011400 	.word	0x40011400
 800430c:	51eb851f 	.word	0x51eb851f

08004310 <__errno>:
 8004310:	4b01      	ldr	r3, [pc, #4]	; (8004318 <__errno+0x8>)
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000014 	.word	0x20000014

0800431c <__libc_init_array>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	4e0d      	ldr	r6, [pc, #52]	; (8004354 <__libc_init_array+0x38>)
 8004320:	4c0d      	ldr	r4, [pc, #52]	; (8004358 <__libc_init_array+0x3c>)
 8004322:	1ba4      	subs	r4, r4, r6
 8004324:	10a4      	asrs	r4, r4, #2
 8004326:	2500      	movs	r5, #0
 8004328:	42a5      	cmp	r5, r4
 800432a:	d109      	bne.n	8004340 <__libc_init_array+0x24>
 800432c:	4e0b      	ldr	r6, [pc, #44]	; (800435c <__libc_init_array+0x40>)
 800432e:	4c0c      	ldr	r4, [pc, #48]	; (8004360 <__libc_init_array+0x44>)
 8004330:	f000 fc3c 	bl	8004bac <_init>
 8004334:	1ba4      	subs	r4, r4, r6
 8004336:	10a4      	asrs	r4, r4, #2
 8004338:	2500      	movs	r5, #0
 800433a:	42a5      	cmp	r5, r4
 800433c:	d105      	bne.n	800434a <__libc_init_array+0x2e>
 800433e:	bd70      	pop	{r4, r5, r6, pc}
 8004340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004344:	4798      	blx	r3
 8004346:	3501      	adds	r5, #1
 8004348:	e7ee      	b.n	8004328 <__libc_init_array+0xc>
 800434a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800434e:	4798      	blx	r3
 8004350:	3501      	adds	r5, #1
 8004352:	e7f2      	b.n	800433a <__libc_init_array+0x1e>
 8004354:	08005f7c 	.word	0x08005f7c
 8004358:	08005f7c 	.word	0x08005f7c
 800435c:	08005f7c 	.word	0x08005f7c
 8004360:	08005f80 	.word	0x08005f80

08004364 <memmove>:
 8004364:	4288      	cmp	r0, r1
 8004366:	b510      	push	{r4, lr}
 8004368:	eb01 0302 	add.w	r3, r1, r2
 800436c:	d807      	bhi.n	800437e <memmove+0x1a>
 800436e:	1e42      	subs	r2, r0, #1
 8004370:	4299      	cmp	r1, r3
 8004372:	d00a      	beq.n	800438a <memmove+0x26>
 8004374:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004378:	f802 4f01 	strb.w	r4, [r2, #1]!
 800437c:	e7f8      	b.n	8004370 <memmove+0xc>
 800437e:	4283      	cmp	r3, r0
 8004380:	d9f5      	bls.n	800436e <memmove+0xa>
 8004382:	1881      	adds	r1, r0, r2
 8004384:	1ad2      	subs	r2, r2, r3
 8004386:	42d3      	cmn	r3, r2
 8004388:	d100      	bne.n	800438c <memmove+0x28>
 800438a:	bd10      	pop	{r4, pc}
 800438c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004390:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004394:	e7f7      	b.n	8004386 <memmove+0x22>

08004396 <memset>:
 8004396:	4402      	add	r2, r0
 8004398:	4603      	mov	r3, r0
 800439a:	4293      	cmp	r3, r2
 800439c:	d100      	bne.n	80043a0 <memset+0xa>
 800439e:	4770      	bx	lr
 80043a0:	f803 1b01 	strb.w	r1, [r3], #1
 80043a4:	e7f9      	b.n	800439a <memset+0x4>
	...

080043a8 <sniprintf>:
 80043a8:	b40c      	push	{r2, r3}
 80043aa:	b530      	push	{r4, r5, lr}
 80043ac:	4b17      	ldr	r3, [pc, #92]	; (800440c <sniprintf+0x64>)
 80043ae:	1e0c      	subs	r4, r1, #0
 80043b0:	b09d      	sub	sp, #116	; 0x74
 80043b2:	681d      	ldr	r5, [r3, #0]
 80043b4:	da08      	bge.n	80043c8 <sniprintf+0x20>
 80043b6:	238b      	movs	r3, #139	; 0x8b
 80043b8:	602b      	str	r3, [r5, #0]
 80043ba:	f04f 30ff 	mov.w	r0, #4294967295
 80043be:	b01d      	add	sp, #116	; 0x74
 80043c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043c4:	b002      	add	sp, #8
 80043c6:	4770      	bx	lr
 80043c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80043cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80043d0:	bf14      	ite	ne
 80043d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80043d6:	4623      	moveq	r3, r4
 80043d8:	9304      	str	r3, [sp, #16]
 80043da:	9307      	str	r3, [sp, #28]
 80043dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043e0:	9002      	str	r0, [sp, #8]
 80043e2:	9006      	str	r0, [sp, #24]
 80043e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80043e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043ea:	ab21      	add	r3, sp, #132	; 0x84
 80043ec:	a902      	add	r1, sp, #8
 80043ee:	4628      	mov	r0, r5
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	f000 f867 	bl	80044c4 <_svfiprintf_r>
 80043f6:	1c43      	adds	r3, r0, #1
 80043f8:	bfbc      	itt	lt
 80043fa:	238b      	movlt	r3, #139	; 0x8b
 80043fc:	602b      	strlt	r3, [r5, #0]
 80043fe:	2c00      	cmp	r4, #0
 8004400:	d0dd      	beq.n	80043be <sniprintf+0x16>
 8004402:	9b02      	ldr	r3, [sp, #8]
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e7d9      	b.n	80043be <sniprintf+0x16>
 800440a:	bf00      	nop
 800440c:	20000014 	.word	0x20000014

08004410 <__ssputs_r>:
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	688e      	ldr	r6, [r1, #8]
 8004416:	429e      	cmp	r6, r3
 8004418:	4682      	mov	sl, r0
 800441a:	460c      	mov	r4, r1
 800441c:	4690      	mov	r8, r2
 800441e:	4699      	mov	r9, r3
 8004420:	d837      	bhi.n	8004492 <__ssputs_r+0x82>
 8004422:	898a      	ldrh	r2, [r1, #12]
 8004424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004428:	d031      	beq.n	800448e <__ssputs_r+0x7e>
 800442a:	6825      	ldr	r5, [r4, #0]
 800442c:	6909      	ldr	r1, [r1, #16]
 800442e:	1a6f      	subs	r7, r5, r1
 8004430:	6965      	ldr	r5, [r4, #20]
 8004432:	2302      	movs	r3, #2
 8004434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004438:	fb95 f5f3 	sdiv	r5, r5, r3
 800443c:	f109 0301 	add.w	r3, r9, #1
 8004440:	443b      	add	r3, r7
 8004442:	429d      	cmp	r5, r3
 8004444:	bf38      	it	cc
 8004446:	461d      	movcc	r5, r3
 8004448:	0553      	lsls	r3, r2, #21
 800444a:	d530      	bpl.n	80044ae <__ssputs_r+0x9e>
 800444c:	4629      	mov	r1, r5
 800444e:	f000 fb13 	bl	8004a78 <_malloc_r>
 8004452:	4606      	mov	r6, r0
 8004454:	b950      	cbnz	r0, 800446c <__ssputs_r+0x5c>
 8004456:	230c      	movs	r3, #12
 8004458:	f8ca 3000 	str.w	r3, [sl]
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	463a      	mov	r2, r7
 800446e:	6921      	ldr	r1, [r4, #16]
 8004470:	f000 faa8 	bl	80049c4 <memcpy>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800447a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	6126      	str	r6, [r4, #16]
 8004482:	6165      	str	r5, [r4, #20]
 8004484:	443e      	add	r6, r7
 8004486:	1bed      	subs	r5, r5, r7
 8004488:	6026      	str	r6, [r4, #0]
 800448a:	60a5      	str	r5, [r4, #8]
 800448c:	464e      	mov	r6, r9
 800448e:	454e      	cmp	r6, r9
 8004490:	d900      	bls.n	8004494 <__ssputs_r+0x84>
 8004492:	464e      	mov	r6, r9
 8004494:	4632      	mov	r2, r6
 8004496:	4641      	mov	r1, r8
 8004498:	6820      	ldr	r0, [r4, #0]
 800449a:	f7ff ff63 	bl	8004364 <memmove>
 800449e:	68a3      	ldr	r3, [r4, #8]
 80044a0:	1b9b      	subs	r3, r3, r6
 80044a2:	60a3      	str	r3, [r4, #8]
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	441e      	add	r6, r3
 80044a8:	6026      	str	r6, [r4, #0]
 80044aa:	2000      	movs	r0, #0
 80044ac:	e7dc      	b.n	8004468 <__ssputs_r+0x58>
 80044ae:	462a      	mov	r2, r5
 80044b0:	f000 fb3c 	bl	8004b2c <_realloc_r>
 80044b4:	4606      	mov	r6, r0
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d1e2      	bne.n	8004480 <__ssputs_r+0x70>
 80044ba:	6921      	ldr	r1, [r4, #16]
 80044bc:	4650      	mov	r0, sl
 80044be:	f000 fa8d 	bl	80049dc <_free_r>
 80044c2:	e7c8      	b.n	8004456 <__ssputs_r+0x46>

080044c4 <_svfiprintf_r>:
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	461d      	mov	r5, r3
 80044ca:	898b      	ldrh	r3, [r1, #12]
 80044cc:	061f      	lsls	r7, r3, #24
 80044ce:	b09d      	sub	sp, #116	; 0x74
 80044d0:	4680      	mov	r8, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	4616      	mov	r6, r2
 80044d6:	d50f      	bpl.n	80044f8 <_svfiprintf_r+0x34>
 80044d8:	690b      	ldr	r3, [r1, #16]
 80044da:	b96b      	cbnz	r3, 80044f8 <_svfiprintf_r+0x34>
 80044dc:	2140      	movs	r1, #64	; 0x40
 80044de:	f000 facb 	bl	8004a78 <_malloc_r>
 80044e2:	6020      	str	r0, [r4, #0]
 80044e4:	6120      	str	r0, [r4, #16]
 80044e6:	b928      	cbnz	r0, 80044f4 <_svfiprintf_r+0x30>
 80044e8:	230c      	movs	r3, #12
 80044ea:	f8c8 3000 	str.w	r3, [r8]
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295
 80044f2:	e0c8      	b.n	8004686 <_svfiprintf_r+0x1c2>
 80044f4:	2340      	movs	r3, #64	; 0x40
 80044f6:	6163      	str	r3, [r4, #20]
 80044f8:	2300      	movs	r3, #0
 80044fa:	9309      	str	r3, [sp, #36]	; 0x24
 80044fc:	2320      	movs	r3, #32
 80044fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004502:	2330      	movs	r3, #48	; 0x30
 8004504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004508:	9503      	str	r5, [sp, #12]
 800450a:	f04f 0b01 	mov.w	fp, #1
 800450e:	4637      	mov	r7, r6
 8004510:	463d      	mov	r5, r7
 8004512:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004516:	b10b      	cbz	r3, 800451c <_svfiprintf_r+0x58>
 8004518:	2b25      	cmp	r3, #37	; 0x25
 800451a:	d13e      	bne.n	800459a <_svfiprintf_r+0xd6>
 800451c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004520:	d00b      	beq.n	800453a <_svfiprintf_r+0x76>
 8004522:	4653      	mov	r3, sl
 8004524:	4632      	mov	r2, r6
 8004526:	4621      	mov	r1, r4
 8004528:	4640      	mov	r0, r8
 800452a:	f7ff ff71 	bl	8004410 <__ssputs_r>
 800452e:	3001      	adds	r0, #1
 8004530:	f000 80a4 	beq.w	800467c <_svfiprintf_r+0x1b8>
 8004534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004536:	4453      	add	r3, sl
 8004538:	9309      	str	r3, [sp, #36]	; 0x24
 800453a:	783b      	ldrb	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 809d 	beq.w	800467c <_svfiprintf_r+0x1b8>
 8004542:	2300      	movs	r3, #0
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	9307      	str	r3, [sp, #28]
 8004550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004554:	931a      	str	r3, [sp, #104]	; 0x68
 8004556:	462f      	mov	r7, r5
 8004558:	2205      	movs	r2, #5
 800455a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800455e:	4850      	ldr	r0, [pc, #320]	; (80046a0 <_svfiprintf_r+0x1dc>)
 8004560:	f7fb fe3e 	bl	80001e0 <memchr>
 8004564:	9b04      	ldr	r3, [sp, #16]
 8004566:	b9d0      	cbnz	r0, 800459e <_svfiprintf_r+0xda>
 8004568:	06d9      	lsls	r1, r3, #27
 800456a:	bf44      	itt	mi
 800456c:	2220      	movmi	r2, #32
 800456e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004572:	071a      	lsls	r2, r3, #28
 8004574:	bf44      	itt	mi
 8004576:	222b      	movmi	r2, #43	; 0x2b
 8004578:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800457c:	782a      	ldrb	r2, [r5, #0]
 800457e:	2a2a      	cmp	r2, #42	; 0x2a
 8004580:	d015      	beq.n	80045ae <_svfiprintf_r+0xea>
 8004582:	9a07      	ldr	r2, [sp, #28]
 8004584:	462f      	mov	r7, r5
 8004586:	2000      	movs	r0, #0
 8004588:	250a      	movs	r5, #10
 800458a:	4639      	mov	r1, r7
 800458c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004590:	3b30      	subs	r3, #48	; 0x30
 8004592:	2b09      	cmp	r3, #9
 8004594:	d94d      	bls.n	8004632 <_svfiprintf_r+0x16e>
 8004596:	b1b8      	cbz	r0, 80045c8 <_svfiprintf_r+0x104>
 8004598:	e00f      	b.n	80045ba <_svfiprintf_r+0xf6>
 800459a:	462f      	mov	r7, r5
 800459c:	e7b8      	b.n	8004510 <_svfiprintf_r+0x4c>
 800459e:	4a40      	ldr	r2, [pc, #256]	; (80046a0 <_svfiprintf_r+0x1dc>)
 80045a0:	1a80      	subs	r0, r0, r2
 80045a2:	fa0b f000 	lsl.w	r0, fp, r0
 80045a6:	4318      	orrs	r0, r3
 80045a8:	9004      	str	r0, [sp, #16]
 80045aa:	463d      	mov	r5, r7
 80045ac:	e7d3      	b.n	8004556 <_svfiprintf_r+0x92>
 80045ae:	9a03      	ldr	r2, [sp, #12]
 80045b0:	1d11      	adds	r1, r2, #4
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	9103      	str	r1, [sp, #12]
 80045b6:	2a00      	cmp	r2, #0
 80045b8:	db01      	blt.n	80045be <_svfiprintf_r+0xfa>
 80045ba:	9207      	str	r2, [sp, #28]
 80045bc:	e004      	b.n	80045c8 <_svfiprintf_r+0x104>
 80045be:	4252      	negs	r2, r2
 80045c0:	f043 0302 	orr.w	r3, r3, #2
 80045c4:	9207      	str	r2, [sp, #28]
 80045c6:	9304      	str	r3, [sp, #16]
 80045c8:	783b      	ldrb	r3, [r7, #0]
 80045ca:	2b2e      	cmp	r3, #46	; 0x2e
 80045cc:	d10c      	bne.n	80045e8 <_svfiprintf_r+0x124>
 80045ce:	787b      	ldrb	r3, [r7, #1]
 80045d0:	2b2a      	cmp	r3, #42	; 0x2a
 80045d2:	d133      	bne.n	800463c <_svfiprintf_r+0x178>
 80045d4:	9b03      	ldr	r3, [sp, #12]
 80045d6:	1d1a      	adds	r2, r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	9203      	str	r2, [sp, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bfb8      	it	lt
 80045e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80045e4:	3702      	adds	r7, #2
 80045e6:	9305      	str	r3, [sp, #20]
 80045e8:	4d2e      	ldr	r5, [pc, #184]	; (80046a4 <_svfiprintf_r+0x1e0>)
 80045ea:	7839      	ldrb	r1, [r7, #0]
 80045ec:	2203      	movs	r2, #3
 80045ee:	4628      	mov	r0, r5
 80045f0:	f7fb fdf6 	bl	80001e0 <memchr>
 80045f4:	b138      	cbz	r0, 8004606 <_svfiprintf_r+0x142>
 80045f6:	2340      	movs	r3, #64	; 0x40
 80045f8:	1b40      	subs	r0, r0, r5
 80045fa:	fa03 f000 	lsl.w	r0, r3, r0
 80045fe:	9b04      	ldr	r3, [sp, #16]
 8004600:	4303      	orrs	r3, r0
 8004602:	3701      	adds	r7, #1
 8004604:	9304      	str	r3, [sp, #16]
 8004606:	7839      	ldrb	r1, [r7, #0]
 8004608:	4827      	ldr	r0, [pc, #156]	; (80046a8 <_svfiprintf_r+0x1e4>)
 800460a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800460e:	2206      	movs	r2, #6
 8004610:	1c7e      	adds	r6, r7, #1
 8004612:	f7fb fde5 	bl	80001e0 <memchr>
 8004616:	2800      	cmp	r0, #0
 8004618:	d038      	beq.n	800468c <_svfiprintf_r+0x1c8>
 800461a:	4b24      	ldr	r3, [pc, #144]	; (80046ac <_svfiprintf_r+0x1e8>)
 800461c:	bb13      	cbnz	r3, 8004664 <_svfiprintf_r+0x1a0>
 800461e:	9b03      	ldr	r3, [sp, #12]
 8004620:	3307      	adds	r3, #7
 8004622:	f023 0307 	bic.w	r3, r3, #7
 8004626:	3308      	adds	r3, #8
 8004628:	9303      	str	r3, [sp, #12]
 800462a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800462c:	444b      	add	r3, r9
 800462e:	9309      	str	r3, [sp, #36]	; 0x24
 8004630:	e76d      	b.n	800450e <_svfiprintf_r+0x4a>
 8004632:	fb05 3202 	mla	r2, r5, r2, r3
 8004636:	2001      	movs	r0, #1
 8004638:	460f      	mov	r7, r1
 800463a:	e7a6      	b.n	800458a <_svfiprintf_r+0xc6>
 800463c:	2300      	movs	r3, #0
 800463e:	3701      	adds	r7, #1
 8004640:	9305      	str	r3, [sp, #20]
 8004642:	4619      	mov	r1, r3
 8004644:	250a      	movs	r5, #10
 8004646:	4638      	mov	r0, r7
 8004648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800464c:	3a30      	subs	r2, #48	; 0x30
 800464e:	2a09      	cmp	r2, #9
 8004650:	d903      	bls.n	800465a <_svfiprintf_r+0x196>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0c8      	beq.n	80045e8 <_svfiprintf_r+0x124>
 8004656:	9105      	str	r1, [sp, #20]
 8004658:	e7c6      	b.n	80045e8 <_svfiprintf_r+0x124>
 800465a:	fb05 2101 	mla	r1, r5, r1, r2
 800465e:	2301      	movs	r3, #1
 8004660:	4607      	mov	r7, r0
 8004662:	e7f0      	b.n	8004646 <_svfiprintf_r+0x182>
 8004664:	ab03      	add	r3, sp, #12
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	4622      	mov	r2, r4
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <_svfiprintf_r+0x1ec>)
 800466c:	a904      	add	r1, sp, #16
 800466e:	4640      	mov	r0, r8
 8004670:	f3af 8000 	nop.w
 8004674:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004678:	4681      	mov	r9, r0
 800467a:	d1d6      	bne.n	800462a <_svfiprintf_r+0x166>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	065b      	lsls	r3, r3, #25
 8004680:	f53f af35 	bmi.w	80044ee <_svfiprintf_r+0x2a>
 8004684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004686:	b01d      	add	sp, #116	; 0x74
 8004688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468c:	ab03      	add	r3, sp, #12
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	4622      	mov	r2, r4
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <_svfiprintf_r+0x1ec>)
 8004694:	a904      	add	r1, sp, #16
 8004696:	4640      	mov	r0, r8
 8004698:	f000 f882 	bl	80047a0 <_printf_i>
 800469c:	e7ea      	b.n	8004674 <_svfiprintf_r+0x1b0>
 800469e:	bf00      	nop
 80046a0:	08005f40 	.word	0x08005f40
 80046a4:	08005f46 	.word	0x08005f46
 80046a8:	08005f4a 	.word	0x08005f4a
 80046ac:	00000000 	.word	0x00000000
 80046b0:	08004411 	.word	0x08004411

080046b4 <_printf_common>:
 80046b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	4691      	mov	r9, r2
 80046ba:	461f      	mov	r7, r3
 80046bc:	688a      	ldr	r2, [r1, #8]
 80046be:	690b      	ldr	r3, [r1, #16]
 80046c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046c4:	4293      	cmp	r3, r2
 80046c6:	bfb8      	it	lt
 80046c8:	4613      	movlt	r3, r2
 80046ca:	f8c9 3000 	str.w	r3, [r9]
 80046ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046d2:	4606      	mov	r6, r0
 80046d4:	460c      	mov	r4, r1
 80046d6:	b112      	cbz	r2, 80046de <_printf_common+0x2a>
 80046d8:	3301      	adds	r3, #1
 80046da:	f8c9 3000 	str.w	r3, [r9]
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	0699      	lsls	r1, r3, #26
 80046e2:	bf42      	ittt	mi
 80046e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80046e8:	3302      	addmi	r3, #2
 80046ea:	f8c9 3000 	strmi.w	r3, [r9]
 80046ee:	6825      	ldr	r5, [r4, #0]
 80046f0:	f015 0506 	ands.w	r5, r5, #6
 80046f4:	d107      	bne.n	8004706 <_printf_common+0x52>
 80046f6:	f104 0a19 	add.w	sl, r4, #25
 80046fa:	68e3      	ldr	r3, [r4, #12]
 80046fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	42ab      	cmp	r3, r5
 8004704:	dc28      	bgt.n	8004758 <_printf_common+0xa4>
 8004706:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800470a:	6822      	ldr	r2, [r4, #0]
 800470c:	3300      	adds	r3, #0
 800470e:	bf18      	it	ne
 8004710:	2301      	movne	r3, #1
 8004712:	0692      	lsls	r2, r2, #26
 8004714:	d42d      	bmi.n	8004772 <_printf_common+0xbe>
 8004716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800471a:	4639      	mov	r1, r7
 800471c:	4630      	mov	r0, r6
 800471e:	47c0      	blx	r8
 8004720:	3001      	adds	r0, #1
 8004722:	d020      	beq.n	8004766 <_printf_common+0xb2>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	68e5      	ldr	r5, [r4, #12]
 8004728:	f8d9 2000 	ldr.w	r2, [r9]
 800472c:	f003 0306 	and.w	r3, r3, #6
 8004730:	2b04      	cmp	r3, #4
 8004732:	bf08      	it	eq
 8004734:	1aad      	subeq	r5, r5, r2
 8004736:	68a3      	ldr	r3, [r4, #8]
 8004738:	6922      	ldr	r2, [r4, #16]
 800473a:	bf0c      	ite	eq
 800473c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004740:	2500      	movne	r5, #0
 8004742:	4293      	cmp	r3, r2
 8004744:	bfc4      	itt	gt
 8004746:	1a9b      	subgt	r3, r3, r2
 8004748:	18ed      	addgt	r5, r5, r3
 800474a:	f04f 0900 	mov.w	r9, #0
 800474e:	341a      	adds	r4, #26
 8004750:	454d      	cmp	r5, r9
 8004752:	d11a      	bne.n	800478a <_printf_common+0xd6>
 8004754:	2000      	movs	r0, #0
 8004756:	e008      	b.n	800476a <_printf_common+0xb6>
 8004758:	2301      	movs	r3, #1
 800475a:	4652      	mov	r2, sl
 800475c:	4639      	mov	r1, r7
 800475e:	4630      	mov	r0, r6
 8004760:	47c0      	blx	r8
 8004762:	3001      	adds	r0, #1
 8004764:	d103      	bne.n	800476e <_printf_common+0xba>
 8004766:	f04f 30ff 	mov.w	r0, #4294967295
 800476a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476e:	3501      	adds	r5, #1
 8004770:	e7c3      	b.n	80046fa <_printf_common+0x46>
 8004772:	18e1      	adds	r1, r4, r3
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	2030      	movs	r0, #48	; 0x30
 8004778:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800477c:	4422      	add	r2, r4
 800477e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004782:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004786:	3302      	adds	r3, #2
 8004788:	e7c5      	b.n	8004716 <_printf_common+0x62>
 800478a:	2301      	movs	r3, #1
 800478c:	4622      	mov	r2, r4
 800478e:	4639      	mov	r1, r7
 8004790:	4630      	mov	r0, r6
 8004792:	47c0      	blx	r8
 8004794:	3001      	adds	r0, #1
 8004796:	d0e6      	beq.n	8004766 <_printf_common+0xb2>
 8004798:	f109 0901 	add.w	r9, r9, #1
 800479c:	e7d8      	b.n	8004750 <_printf_common+0x9c>
	...

080047a0 <_printf_i>:
 80047a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80047a8:	460c      	mov	r4, r1
 80047aa:	7e09      	ldrb	r1, [r1, #24]
 80047ac:	b085      	sub	sp, #20
 80047ae:	296e      	cmp	r1, #110	; 0x6e
 80047b0:	4617      	mov	r7, r2
 80047b2:	4606      	mov	r6, r0
 80047b4:	4698      	mov	r8, r3
 80047b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047b8:	f000 80b3 	beq.w	8004922 <_printf_i+0x182>
 80047bc:	d822      	bhi.n	8004804 <_printf_i+0x64>
 80047be:	2963      	cmp	r1, #99	; 0x63
 80047c0:	d036      	beq.n	8004830 <_printf_i+0x90>
 80047c2:	d80a      	bhi.n	80047da <_printf_i+0x3a>
 80047c4:	2900      	cmp	r1, #0
 80047c6:	f000 80b9 	beq.w	800493c <_printf_i+0x19c>
 80047ca:	2958      	cmp	r1, #88	; 0x58
 80047cc:	f000 8083 	beq.w	80048d6 <_printf_i+0x136>
 80047d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80047d8:	e032      	b.n	8004840 <_printf_i+0xa0>
 80047da:	2964      	cmp	r1, #100	; 0x64
 80047dc:	d001      	beq.n	80047e2 <_printf_i+0x42>
 80047de:	2969      	cmp	r1, #105	; 0x69
 80047e0:	d1f6      	bne.n	80047d0 <_printf_i+0x30>
 80047e2:	6820      	ldr	r0, [r4, #0]
 80047e4:	6813      	ldr	r3, [r2, #0]
 80047e6:	0605      	lsls	r5, r0, #24
 80047e8:	f103 0104 	add.w	r1, r3, #4
 80047ec:	d52a      	bpl.n	8004844 <_printf_i+0xa4>
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6011      	str	r1, [r2, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da03      	bge.n	80047fe <_printf_i+0x5e>
 80047f6:	222d      	movs	r2, #45	; 0x2d
 80047f8:	425b      	negs	r3, r3
 80047fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80047fe:	486f      	ldr	r0, [pc, #444]	; (80049bc <_printf_i+0x21c>)
 8004800:	220a      	movs	r2, #10
 8004802:	e039      	b.n	8004878 <_printf_i+0xd8>
 8004804:	2973      	cmp	r1, #115	; 0x73
 8004806:	f000 809d 	beq.w	8004944 <_printf_i+0x1a4>
 800480a:	d808      	bhi.n	800481e <_printf_i+0x7e>
 800480c:	296f      	cmp	r1, #111	; 0x6f
 800480e:	d020      	beq.n	8004852 <_printf_i+0xb2>
 8004810:	2970      	cmp	r1, #112	; 0x70
 8004812:	d1dd      	bne.n	80047d0 <_printf_i+0x30>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	f043 0320 	orr.w	r3, r3, #32
 800481a:	6023      	str	r3, [r4, #0]
 800481c:	e003      	b.n	8004826 <_printf_i+0x86>
 800481e:	2975      	cmp	r1, #117	; 0x75
 8004820:	d017      	beq.n	8004852 <_printf_i+0xb2>
 8004822:	2978      	cmp	r1, #120	; 0x78
 8004824:	d1d4      	bne.n	80047d0 <_printf_i+0x30>
 8004826:	2378      	movs	r3, #120	; 0x78
 8004828:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800482c:	4864      	ldr	r0, [pc, #400]	; (80049c0 <_printf_i+0x220>)
 800482e:	e055      	b.n	80048dc <_printf_i+0x13c>
 8004830:	6813      	ldr	r3, [r2, #0]
 8004832:	1d19      	adds	r1, r3, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6011      	str	r1, [r2, #0]
 8004838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800483c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004840:	2301      	movs	r3, #1
 8004842:	e08c      	b.n	800495e <_printf_i+0x1be>
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6011      	str	r1, [r2, #0]
 8004848:	f010 0f40 	tst.w	r0, #64	; 0x40
 800484c:	bf18      	it	ne
 800484e:	b21b      	sxthne	r3, r3
 8004850:	e7cf      	b.n	80047f2 <_printf_i+0x52>
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	6825      	ldr	r5, [r4, #0]
 8004856:	1d18      	adds	r0, r3, #4
 8004858:	6010      	str	r0, [r2, #0]
 800485a:	0628      	lsls	r0, r5, #24
 800485c:	d501      	bpl.n	8004862 <_printf_i+0xc2>
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	e002      	b.n	8004868 <_printf_i+0xc8>
 8004862:	0668      	lsls	r0, r5, #25
 8004864:	d5fb      	bpl.n	800485e <_printf_i+0xbe>
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	4854      	ldr	r0, [pc, #336]	; (80049bc <_printf_i+0x21c>)
 800486a:	296f      	cmp	r1, #111	; 0x6f
 800486c:	bf14      	ite	ne
 800486e:	220a      	movne	r2, #10
 8004870:	2208      	moveq	r2, #8
 8004872:	2100      	movs	r1, #0
 8004874:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004878:	6865      	ldr	r5, [r4, #4]
 800487a:	60a5      	str	r5, [r4, #8]
 800487c:	2d00      	cmp	r5, #0
 800487e:	f2c0 8095 	blt.w	80049ac <_printf_i+0x20c>
 8004882:	6821      	ldr	r1, [r4, #0]
 8004884:	f021 0104 	bic.w	r1, r1, #4
 8004888:	6021      	str	r1, [r4, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d13d      	bne.n	800490a <_printf_i+0x16a>
 800488e:	2d00      	cmp	r5, #0
 8004890:	f040 808e 	bne.w	80049b0 <_printf_i+0x210>
 8004894:	4665      	mov	r5, ip
 8004896:	2a08      	cmp	r2, #8
 8004898:	d10b      	bne.n	80048b2 <_printf_i+0x112>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	07db      	lsls	r3, r3, #31
 800489e:	d508      	bpl.n	80048b2 <_printf_i+0x112>
 80048a0:	6923      	ldr	r3, [r4, #16]
 80048a2:	6862      	ldr	r2, [r4, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	bfde      	ittt	le
 80048a8:	2330      	movle	r3, #48	; 0x30
 80048aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048b2:	ebac 0305 	sub.w	r3, ip, r5
 80048b6:	6123      	str	r3, [r4, #16]
 80048b8:	f8cd 8000 	str.w	r8, [sp]
 80048bc:	463b      	mov	r3, r7
 80048be:	aa03      	add	r2, sp, #12
 80048c0:	4621      	mov	r1, r4
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff fef6 	bl	80046b4 <_printf_common>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d14d      	bne.n	8004968 <_printf_i+0x1c8>
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	b005      	add	sp, #20
 80048d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048d6:	4839      	ldr	r0, [pc, #228]	; (80049bc <_printf_i+0x21c>)
 80048d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80048dc:	6813      	ldr	r3, [r2, #0]
 80048de:	6821      	ldr	r1, [r4, #0]
 80048e0:	1d1d      	adds	r5, r3, #4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6015      	str	r5, [r2, #0]
 80048e6:	060a      	lsls	r2, r1, #24
 80048e8:	d50b      	bpl.n	8004902 <_printf_i+0x162>
 80048ea:	07ca      	lsls	r2, r1, #31
 80048ec:	bf44      	itt	mi
 80048ee:	f041 0120 	orrmi.w	r1, r1, #32
 80048f2:	6021      	strmi	r1, [r4, #0]
 80048f4:	b91b      	cbnz	r3, 80048fe <_printf_i+0x15e>
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	f022 0220 	bic.w	r2, r2, #32
 80048fc:	6022      	str	r2, [r4, #0]
 80048fe:	2210      	movs	r2, #16
 8004900:	e7b7      	b.n	8004872 <_printf_i+0xd2>
 8004902:	064d      	lsls	r5, r1, #25
 8004904:	bf48      	it	mi
 8004906:	b29b      	uxthmi	r3, r3
 8004908:	e7ef      	b.n	80048ea <_printf_i+0x14a>
 800490a:	4665      	mov	r5, ip
 800490c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004910:	fb02 3311 	mls	r3, r2, r1, r3
 8004914:	5cc3      	ldrb	r3, [r0, r3]
 8004916:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800491a:	460b      	mov	r3, r1
 800491c:	2900      	cmp	r1, #0
 800491e:	d1f5      	bne.n	800490c <_printf_i+0x16c>
 8004920:	e7b9      	b.n	8004896 <_printf_i+0xf6>
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	6825      	ldr	r5, [r4, #0]
 8004926:	6961      	ldr	r1, [r4, #20]
 8004928:	1d18      	adds	r0, r3, #4
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	0628      	lsls	r0, r5, #24
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	d501      	bpl.n	8004936 <_printf_i+0x196>
 8004932:	6019      	str	r1, [r3, #0]
 8004934:	e002      	b.n	800493c <_printf_i+0x19c>
 8004936:	066a      	lsls	r2, r5, #25
 8004938:	d5fb      	bpl.n	8004932 <_printf_i+0x192>
 800493a:	8019      	strh	r1, [r3, #0]
 800493c:	2300      	movs	r3, #0
 800493e:	6123      	str	r3, [r4, #16]
 8004940:	4665      	mov	r5, ip
 8004942:	e7b9      	b.n	80048b8 <_printf_i+0x118>
 8004944:	6813      	ldr	r3, [r2, #0]
 8004946:	1d19      	adds	r1, r3, #4
 8004948:	6011      	str	r1, [r2, #0]
 800494a:	681d      	ldr	r5, [r3, #0]
 800494c:	6862      	ldr	r2, [r4, #4]
 800494e:	2100      	movs	r1, #0
 8004950:	4628      	mov	r0, r5
 8004952:	f7fb fc45 	bl	80001e0 <memchr>
 8004956:	b108      	cbz	r0, 800495c <_printf_i+0x1bc>
 8004958:	1b40      	subs	r0, r0, r5
 800495a:	6060      	str	r0, [r4, #4]
 800495c:	6863      	ldr	r3, [r4, #4]
 800495e:	6123      	str	r3, [r4, #16]
 8004960:	2300      	movs	r3, #0
 8004962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004966:	e7a7      	b.n	80048b8 <_printf_i+0x118>
 8004968:	6923      	ldr	r3, [r4, #16]
 800496a:	462a      	mov	r2, r5
 800496c:	4639      	mov	r1, r7
 800496e:	4630      	mov	r0, r6
 8004970:	47c0      	blx	r8
 8004972:	3001      	adds	r0, #1
 8004974:	d0aa      	beq.n	80048cc <_printf_i+0x12c>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	079b      	lsls	r3, r3, #30
 800497a:	d413      	bmi.n	80049a4 <_printf_i+0x204>
 800497c:	68e0      	ldr	r0, [r4, #12]
 800497e:	9b03      	ldr	r3, [sp, #12]
 8004980:	4298      	cmp	r0, r3
 8004982:	bfb8      	it	lt
 8004984:	4618      	movlt	r0, r3
 8004986:	e7a3      	b.n	80048d0 <_printf_i+0x130>
 8004988:	2301      	movs	r3, #1
 800498a:	464a      	mov	r2, r9
 800498c:	4639      	mov	r1, r7
 800498e:	4630      	mov	r0, r6
 8004990:	47c0      	blx	r8
 8004992:	3001      	adds	r0, #1
 8004994:	d09a      	beq.n	80048cc <_printf_i+0x12c>
 8004996:	3501      	adds	r5, #1
 8004998:	68e3      	ldr	r3, [r4, #12]
 800499a:	9a03      	ldr	r2, [sp, #12]
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	42ab      	cmp	r3, r5
 80049a0:	dcf2      	bgt.n	8004988 <_printf_i+0x1e8>
 80049a2:	e7eb      	b.n	800497c <_printf_i+0x1dc>
 80049a4:	2500      	movs	r5, #0
 80049a6:	f104 0919 	add.w	r9, r4, #25
 80049aa:	e7f5      	b.n	8004998 <_printf_i+0x1f8>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ac      	bne.n	800490a <_printf_i+0x16a>
 80049b0:	7803      	ldrb	r3, [r0, #0]
 80049b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ba:	e76c      	b.n	8004896 <_printf_i+0xf6>
 80049bc:	08005f51 	.word	0x08005f51
 80049c0:	08005f62 	.word	0x08005f62

080049c4 <memcpy>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	1e43      	subs	r3, r0, #1
 80049c8:	440a      	add	r2, r1
 80049ca:	4291      	cmp	r1, r2
 80049cc:	d100      	bne.n	80049d0 <memcpy+0xc>
 80049ce:	bd10      	pop	{r4, pc}
 80049d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d8:	e7f7      	b.n	80049ca <memcpy+0x6>
	...

080049dc <_free_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4605      	mov	r5, r0
 80049e0:	2900      	cmp	r1, #0
 80049e2:	d045      	beq.n	8004a70 <_free_r+0x94>
 80049e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e8:	1f0c      	subs	r4, r1, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bfb8      	it	lt
 80049ee:	18e4      	addlt	r4, r4, r3
 80049f0:	f000 f8d2 	bl	8004b98 <__malloc_lock>
 80049f4:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <_free_r+0x98>)
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	4610      	mov	r0, r2
 80049fa:	b933      	cbnz	r3, 8004a0a <_free_r+0x2e>
 80049fc:	6063      	str	r3, [r4, #4]
 80049fe:	6014      	str	r4, [r2, #0]
 8004a00:	4628      	mov	r0, r5
 8004a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a06:	f000 b8c8 	b.w	8004b9a <__malloc_unlock>
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	d90c      	bls.n	8004a28 <_free_r+0x4c>
 8004a0e:	6821      	ldr	r1, [r4, #0]
 8004a10:	1862      	adds	r2, r4, r1
 8004a12:	4293      	cmp	r3, r2
 8004a14:	bf04      	itt	eq
 8004a16:	681a      	ldreq	r2, [r3, #0]
 8004a18:	685b      	ldreq	r3, [r3, #4]
 8004a1a:	6063      	str	r3, [r4, #4]
 8004a1c:	bf04      	itt	eq
 8004a1e:	1852      	addeq	r2, r2, r1
 8004a20:	6022      	streq	r2, [r4, #0]
 8004a22:	6004      	str	r4, [r0, #0]
 8004a24:	e7ec      	b.n	8004a00 <_free_r+0x24>
 8004a26:	4613      	mov	r3, r2
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	b10a      	cbz	r2, 8004a30 <_free_r+0x54>
 8004a2c:	42a2      	cmp	r2, r4
 8004a2e:	d9fa      	bls.n	8004a26 <_free_r+0x4a>
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	1858      	adds	r0, r3, r1
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	d10b      	bne.n	8004a50 <_free_r+0x74>
 8004a38:	6820      	ldr	r0, [r4, #0]
 8004a3a:	4401      	add	r1, r0
 8004a3c:	1858      	adds	r0, r3, r1
 8004a3e:	4282      	cmp	r2, r0
 8004a40:	6019      	str	r1, [r3, #0]
 8004a42:	d1dd      	bne.n	8004a00 <_free_r+0x24>
 8004a44:	6810      	ldr	r0, [r2, #0]
 8004a46:	6852      	ldr	r2, [r2, #4]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	4401      	add	r1, r0
 8004a4c:	6019      	str	r1, [r3, #0]
 8004a4e:	e7d7      	b.n	8004a00 <_free_r+0x24>
 8004a50:	d902      	bls.n	8004a58 <_free_r+0x7c>
 8004a52:	230c      	movs	r3, #12
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	e7d3      	b.n	8004a00 <_free_r+0x24>
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	1821      	adds	r1, r4, r0
 8004a5c:	428a      	cmp	r2, r1
 8004a5e:	bf04      	itt	eq
 8004a60:	6811      	ldreq	r1, [r2, #0]
 8004a62:	6852      	ldreq	r2, [r2, #4]
 8004a64:	6062      	str	r2, [r4, #4]
 8004a66:	bf04      	itt	eq
 8004a68:	1809      	addeq	r1, r1, r0
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	605c      	str	r4, [r3, #4]
 8004a6e:	e7c7      	b.n	8004a00 <_free_r+0x24>
 8004a70:	bd38      	pop	{r3, r4, r5, pc}
 8004a72:	bf00      	nop
 8004a74:	200004a4 	.word	0x200004a4

08004a78 <_malloc_r>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	1ccd      	adds	r5, r1, #3
 8004a7c:	f025 0503 	bic.w	r5, r5, #3
 8004a80:	3508      	adds	r5, #8
 8004a82:	2d0c      	cmp	r5, #12
 8004a84:	bf38      	it	cc
 8004a86:	250c      	movcc	r5, #12
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	db01      	blt.n	8004a92 <_malloc_r+0x1a>
 8004a8e:	42a9      	cmp	r1, r5
 8004a90:	d903      	bls.n	8004a9a <_malloc_r+0x22>
 8004a92:	230c      	movs	r3, #12
 8004a94:	6033      	str	r3, [r6, #0]
 8004a96:	2000      	movs	r0, #0
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	f000 f87d 	bl	8004b98 <__malloc_lock>
 8004a9e:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <_malloc_r+0xac>)
 8004aa0:	6814      	ldr	r4, [r2, #0]
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	b991      	cbnz	r1, 8004acc <_malloc_r+0x54>
 8004aa6:	4c20      	ldr	r4, [pc, #128]	; (8004b28 <_malloc_r+0xb0>)
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	b91b      	cbnz	r3, 8004ab4 <_malloc_r+0x3c>
 8004aac:	4630      	mov	r0, r6
 8004aae:	f000 f863 	bl	8004b78 <_sbrk_r>
 8004ab2:	6020      	str	r0, [r4, #0]
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f000 f85e 	bl	8004b78 <_sbrk_r>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d124      	bne.n	8004b0a <_malloc_r+0x92>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	6033      	str	r3, [r6, #0]
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f000 f868 	bl	8004b9a <__malloc_unlock>
 8004aca:	e7e4      	b.n	8004a96 <_malloc_r+0x1e>
 8004acc:	680b      	ldr	r3, [r1, #0]
 8004ace:	1b5b      	subs	r3, r3, r5
 8004ad0:	d418      	bmi.n	8004b04 <_malloc_r+0x8c>
 8004ad2:	2b0b      	cmp	r3, #11
 8004ad4:	d90f      	bls.n	8004af6 <_malloc_r+0x7e>
 8004ad6:	600b      	str	r3, [r1, #0]
 8004ad8:	50cd      	str	r5, [r1, r3]
 8004ada:	18cc      	adds	r4, r1, r3
 8004adc:	4630      	mov	r0, r6
 8004ade:	f000 f85c 	bl	8004b9a <__malloc_unlock>
 8004ae2:	f104 000b 	add.w	r0, r4, #11
 8004ae6:	1d23      	adds	r3, r4, #4
 8004ae8:	f020 0007 	bic.w	r0, r0, #7
 8004aec:	1ac3      	subs	r3, r0, r3
 8004aee:	d0d3      	beq.n	8004a98 <_malloc_r+0x20>
 8004af0:	425a      	negs	r2, r3
 8004af2:	50e2      	str	r2, [r4, r3]
 8004af4:	e7d0      	b.n	8004a98 <_malloc_r+0x20>
 8004af6:	428c      	cmp	r4, r1
 8004af8:	684b      	ldr	r3, [r1, #4]
 8004afa:	bf16      	itet	ne
 8004afc:	6063      	strne	r3, [r4, #4]
 8004afe:	6013      	streq	r3, [r2, #0]
 8004b00:	460c      	movne	r4, r1
 8004b02:	e7eb      	b.n	8004adc <_malloc_r+0x64>
 8004b04:	460c      	mov	r4, r1
 8004b06:	6849      	ldr	r1, [r1, #4]
 8004b08:	e7cc      	b.n	8004aa4 <_malloc_r+0x2c>
 8004b0a:	1cc4      	adds	r4, r0, #3
 8004b0c:	f024 0403 	bic.w	r4, r4, #3
 8004b10:	42a0      	cmp	r0, r4
 8004b12:	d005      	beq.n	8004b20 <_malloc_r+0xa8>
 8004b14:	1a21      	subs	r1, r4, r0
 8004b16:	4630      	mov	r0, r6
 8004b18:	f000 f82e 	bl	8004b78 <_sbrk_r>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d0cf      	beq.n	8004ac0 <_malloc_r+0x48>
 8004b20:	6025      	str	r5, [r4, #0]
 8004b22:	e7db      	b.n	8004adc <_malloc_r+0x64>
 8004b24:	200004a4 	.word	0x200004a4
 8004b28:	200004a8 	.word	0x200004a8

08004b2c <_realloc_r>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	4607      	mov	r7, r0
 8004b30:	4614      	mov	r4, r2
 8004b32:	460e      	mov	r6, r1
 8004b34:	b921      	cbnz	r1, 8004b40 <_realloc_r+0x14>
 8004b36:	4611      	mov	r1, r2
 8004b38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b3c:	f7ff bf9c 	b.w	8004a78 <_malloc_r>
 8004b40:	b922      	cbnz	r2, 8004b4c <_realloc_r+0x20>
 8004b42:	f7ff ff4b 	bl	80049dc <_free_r>
 8004b46:	4625      	mov	r5, r4
 8004b48:	4628      	mov	r0, r5
 8004b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b4c:	f000 f826 	bl	8004b9c <_malloc_usable_size_r>
 8004b50:	42a0      	cmp	r0, r4
 8004b52:	d20f      	bcs.n	8004b74 <_realloc_r+0x48>
 8004b54:	4621      	mov	r1, r4
 8004b56:	4638      	mov	r0, r7
 8004b58:	f7ff ff8e 	bl	8004a78 <_malloc_r>
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d0f2      	beq.n	8004b48 <_realloc_r+0x1c>
 8004b62:	4631      	mov	r1, r6
 8004b64:	4622      	mov	r2, r4
 8004b66:	f7ff ff2d 	bl	80049c4 <memcpy>
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7ff ff35 	bl	80049dc <_free_r>
 8004b72:	e7e9      	b.n	8004b48 <_realloc_r+0x1c>
 8004b74:	4635      	mov	r5, r6
 8004b76:	e7e7      	b.n	8004b48 <_realloc_r+0x1c>

08004b78 <_sbrk_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4c06      	ldr	r4, [pc, #24]	; (8004b94 <_sbrk_r+0x1c>)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4605      	mov	r5, r0
 8004b80:	4608      	mov	r0, r1
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	f7fc ff6c 	bl	8001a60 <_sbrk>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_sbrk_r+0x1a>
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_sbrk_r+0x1a>
 8004b90:	602b      	str	r3, [r5, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	200005a0 	.word	0x200005a0

08004b98 <__malloc_lock>:
 8004b98:	4770      	bx	lr

08004b9a <__malloc_unlock>:
 8004b9a:	4770      	bx	lr

08004b9c <_malloc_usable_size_r>:
 8004b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba0:	1f18      	subs	r0, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bfbc      	itt	lt
 8004ba6:	580b      	ldrlt	r3, [r1, r0]
 8004ba8:	18c0      	addlt	r0, r0, r3
 8004baa:	4770      	bx	lr

08004bac <_init>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	bf00      	nop
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr

08004bb8 <_fini>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr
